#line 1 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

#line 3 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int Scanner::yylex()

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 91
#define YY_END_OF_BUFFER 92
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[436] =
    {   0,
        0,    0,   89,   89,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   86,   86,   47,   47,   51,   51,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   92,   84,
       80,   79,   53,   84,   84,   84,   84,   81,   83,   83,
       83,   83,   83,   83,   83,   83,   84,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   83,   12,   13,
       89,   90,   91,   87,   86,   86,   47,   49,   48,   51,

       52,   64,   55,   54,   64,   91,   83,   65,   68,   68,
       67,   91,   68,   68,   68,   68,   68,   68,   68,   68,
       66,   83,   12,   13,   83,   70,   71,   83,   72,   73,
       77,   78,   80,   79,    0,    0,    0,   82,   82,   45,
       46,   81,   83,   83,   83,   83,   83,   83,   83,   83,
        0,   83,   83,   83,   83,   10,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   89,   87,   86,   86,   47,
       48,   48,   50,   51,   64,   45,   46,   63,   56,   57,
       61,   62,   58,   60,   59,   83,   68,   68,   68,   68,
       68,   10,   68,   68,   68,   68,   68,   68,   68,   83,

       83,   83,    0,    0,   83,   83,   83,   83,   83,   83,
       83,   83,    0,   83,   83,   83,   83,   35,   83,   83,
       11,   83,   83,   83,   83,   83,   83,   56,   57,   83,
       68,   68,   68,   35,   68,   68,   11,   68,   68,   68,
       68,   68,   83,   83,    0,    0,   83,   83,   83,   83,
       83,   83,   83,   83,    0,   31,   83,   83,   83,   36,
       37,   38,   83,   23,   24,   25,   83,   83,   83,   83,
       83,   20,   21,   22,   14,   56,   31,   68,   68,   36,
       37,   38,   68,   23,   24,   25,   68,   68,   68,   20,
       21,   22,   14,   69,   83,    0,    0,   83,   83,   83,

       83,   83,   83,   83,   83,    0,   32,   33,   34,   83,
       16,   39,   40,   41,   83,   83,   83,   83,   83,   32,
       33,   34,   16,   39,   40,   41,   68,   68,   68,   83,
        0,    0,   83,   83,   83,   83,   83,   83,   83,   83,
        4,   83,   17,   18,   19,   83,   43,    9,   83,   83,
       17,   18,   19,   43,   68,   68,   83,   88,    0,   83,
       83,   83,   83,   83,   83,   83,   83,   83,    5,   83,
       83,   83,   83,   42,   83,   68,   68,   68,   42,   68,
       85,   83,   83,   83,   83,   83,   83,   83,   83,   83,
       26,   27,   28,   29,   30,    3,   15,   26,   27,   28,

       29,   30,   15,   83,   83,   83,   83,   83,    2,    7,
       83,   83,   83,    1,   83,   83,   83,   83,   83,   83,
       83,   75,   83,   83,   83,   83,   83,    8,   44,   74,
       83,   83,    6,   76,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    8,    1,    8,    9,   10,   11,   11,   12,
       13,   14,   11,   11,   11,   15,   15,    1,    1,   16,
        1,    1,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   17,   17,   17,   17,   17,   17,   17,   17,   24,
       17,   17,   25,   26,   17,   27,   17,   17,   17,   17,
       28,   29,   30,   31,   17,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   17,   17,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   17,   52,
       53,   17,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    2,    3,    1,    4,    1,    5,    1,    1,    6,
        7,    7,    7,    7,    7,    1,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    1,    8,    1,
        6,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    6,    6
    } ;

static const flex_int16_t yy_base[453] =
    {   0,
        0,    0,  726,  725,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   55,  110,    0,    0,
        0,    0,    0,    0,   71,   75,   72,   85,  724,  723,
       98,  125,  161,  211,  264,  318,  369,    0,  105,  122,
      124,  134,    0,    0,    0,    0,   27,   35,    0,    0,
        0,    0,  720,  719,  718,  717,   89,  137,  721,  730,
       91,  717,  730,   62,  208,  213,   89,  220,    0,  675,
      686,  681,  676,  683,  678,  677,  684,   54,  678,  669,
      112,  677,  658,  671,  657,  669,  661,  139,  730,  730,
        0,  730,  730,    0,  129,  188,    0,  730,   97,    0,

      730,    0,  730,  730,  189,  414,  654,  730,    0,  193,
      699,  200,  105,  660,  157,  668,  649,  649,  654,  170,
      730,  187,  730,  730,  664,  730,  730,  659,  730,  730,
      730,  730,  235,  691,  657,  649,  258,  266,  271,  730,
      730,  318,    0,  648,  641,  645,  636,  645,  128,  639,
      648,  640,  647,  632,  637,  631,  643,  629,  628,  638,
      628,  640,  201,  639,  632,    0,    0,  238,  240,    0,
      240,  250,  730,    0,    0,    0,    0,  730,  276,  323,
      730,  730,  730,  730,  730,  624,    0,  290,  626,  633,
      624,  618,  630,  616,  615,  616,  259,  628,  621,  611,

      611,  611,  620,  622,  607,  622,  611,  616,  606,  611,
      600,  599,  604,  605,  611,  607,  611,  297,  608,  311,
        0,  601,  196,  603,  599,  327,  603,  331,  364,  597,
      595,  601,  602,  340,  599,  351,    0,  592,  594,  590,
      368,  594,  580,  578,  586,  584,  575,  582,  586,  580,
      579,  576,  568,  581,  586,    0,  371,  578,  565,    0,
        0,    0,  374,    0,    0,    0,  565,  569,  577,  566,
      571,    0,    0,    0,    0,  378,    0,  382,  559,    0,
        0,    0,  385,    0,    0,    0,  564,  562,  567,    0,
        0,    0,    0,    0,  568,  560,  552,  569,  579,  550,

      573,  561,  556,  548,  542,  563,    0,    0,    0,  556,
      391,    0,    0,    0,  542,  552,  539,  538,  528,    0,
        0,    0,  400,    0,    0,    0,  532,  515,  511,  496,
      510,  503,  494,  483,  415,  421,  412,  412,  420,  278,
      730,  408,  402,  401,  400,  414,    0,    0,  407,  412,
      394,  393,  392,    0,  401,  406,  416,  730,  404,  390,
      391,  384,  404,  410,  384,  421,  388,  392,    0,  284,
      119,  416,  375,    0,  386,  336,  160,  404,    0,  380,
      730,  392,  364,  382,  366,  351,  335,  350,  320,  329,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  309,  310,  317,  290,  285,    0,    0,
      274,  278,  268,    0,  270,  229,  215,  231,  222,  215,
      183,    0,  177,  153,  140,  150,  132,    0,    0,    0,
       59,   53,    0,    0,  730,  463,  471,  479,  487,  495,
      503,  511,  519,   65,  527,  535,  543,  551,  559,  567,
      574,  582
    } ;

static const flex_int16_t yy_def[453] =
    {   0,
      435,    1,  436,  436,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  438,  438,   18,   18,
      437,  437,  437,  437,  439,  439,  440,  440,  441,  441,
      442,  442,   18,   18,  443,  443,   18,   37,   37,   37,
       37,   37,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   37,   37,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  444,  444,
      444,  444,  444,  444,  444,  444,  435,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  435,  435,
      445,  435,  435,  446,  435,  446,  447,  435,  448,  449,

      435,  450,  435,  435,  450,  451,  444,  435,  452,  452,
      435,  435,  452,  452,  452,  452,  452,  452,  452,  452,
      435,  444,  435,  435,  444,  435,  435,  444,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  444,  444,  444,  444,  444,  444,  444,  444,
      435,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  445,  446,  435,  446,  447,
      448,  448,  435,  449,  450,  450,  450,  435,  435,  435,
      435,  435,  435,  435,  435,  444,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  444,

      444,  444,  435,  435,  444,  444,  444,  444,  444,  444,
      444,  444,  435,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  435,  435,  444,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  444,  444,  435,  435,  444,  444,  444,  444,
      444,  444,  444,  444,  435,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  435,  452,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  444,  444,  435,  435,  444,  444,  444,

      444,  444,  444,  444,  444,  435,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  452,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  444,
      435,  435,  444,  444,  444,  444,  444,  444,  444,  444,
      435,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      452,  452,  452,  452,  452,  452,  444,  435,  435,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  452,  452,  452,  452,  452,
      435,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  452,  452,  452,

      452,  452,  452,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,    0,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435
    } ;

static const flex_int16_t yy_nxt[786] =
    {   0,
       60,   61,   62,   61,   63,   64,   60,   65,   66,   67,
       68,   68,   68,   68,   68,   60,   69,   69,   70,   69,
       69,   71,   72,   73,   74,   75,   76,   77,   60,   60,
       60,   69,   78,   79,   69,   69,   80,   69,   69,   81,
       69,   82,   69,   83,   69,   69,   84,   85,   86,   87,
       88,   69,   69,   89,   90,   60,   61,   62,   61,   60,
       60,   60,   60,   60,   67,   60,   60,   60,   60,   60,
       60,  143,   95,   93,   98,   96,   95,   93,   99,   96,
      131,  132,   60,   60,   60,   60,   96,   98,  131,  132,
       96,   99,  133,   60,  133,  140,  135,  152,  141,  434,

      103,  136,  104,  172,  153,  433,  173,  105,   60,   60,
       60,   61,   62,   61,   60,   60,   60,   60,   60,   67,
       60,   60,   60,   60,   60,   60,  106,  103,  125,  104,
      168,  393,  394,  168,  105,   69,  107,   60,   60,   60,
       60,   60,  131,  132,  168,  125,   72,   73,  189,  125,
      128,   69,  107,  106,  156,  190,   72,   73,  126,  127,
      128,  210,  157,   60,   60,   63,  125,  432,   69,  107,
       69,  107,  400,  401,  164,  126,  127,  129,  130,  211,
       69,  107,  165,   69,  107,  431,  430,  129,  130,  168,
      131,  132,  169,   78,  188,  176,  188,   80,  177,  192,

       81,  429,   82,  169,   83,  198,  140,  193,  107,  141,
       87,   88,  428,  199,  108,   63,  137,  427,  138,  138,
      138,  138,  138,  139,  139,  139,  139,  139,  137,  200,
      142,  142,  142,  142,  142,  268,  133,  157,  133,  168,
      224,  168,  168,   78,  169,  269,  435,   80,  225,  435,
       81,  426,   82,  168,   83,  169,  172,  425,  107,  173,
       87,   88,  424,  423,  108,  110,  111,  110,  139,  139,
      139,  139,  139,  112,  137,  422,  138,  138,  138,  138,
      138,  139,  139,  139,  139,  139,  228,  228,  228,  228,
      229,  188,   93,  188,   93,  391,  113,  392,  239,  367,

      114,  421,  368,  115,  420,  116,  240,  117,  260,  261,
      262,  118,  419,  119,  120,  418,  417,   93,  121,  110,
      111,  110,  264,  265,  266,  416,  137,  112,  142,  142,
      142,  142,  142,  229,  229,  229,  229,  229,  272,  273,
      274,  276,  276,  276,  276,  229,   93,  398,   93,  399,
      113,  280,  281,  282,  114,  415,  414,  115,  413,  116,
      412,  117,  284,  285,  286,  118,  411,  119,  120,  410,
      409,   93,  121,   63,  229,  229,  229,  229,  229,  290,
      291,  292,  307,  308,  309,  312,  313,  314,  229,  229,
      229,  229,  229,  320,  321,  322,  324,  325,  326,  408,

      407,   78,  343,  344,  345,   80,  406,  405,  122,  404,
       82,  351,  352,  353,  403,   84,   85,  402,   87,   88,
      397,  396,  123,  124,  179,  179,  179,  179,  180,  395,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      368,  380,  379,  378,  377,  376,  181,  375,  374,  373,
      182,  372,  371,  370,  369,  366,  183,  365,  364,  363,
      184,  362,  185,   91,   91,   91,   91,   91,   91,   91,
       91,   93,   93,   93,   93,   93,   93,   93,   93,   69,
       69,   69,   69,   69,   69,   69,   69,   94,   94,   94,
       94,   94,   94,   94,   94,   97,   97,   97,   97,   97,

       97,   97,   97,  100,  100,  100,  100,  100,  100,  100,
      100,  102,  102,  102,  102,  102,  102,  102,  102,  109,
      109,  109,  109,  109,  109,  109,  109,  166,  166,  361,
      166,  166,  166,  166,  166,  167,  360,  359,  167,  167,
      167,  167,  167,  170,  170,  358,  170,  357,  170,  170,
      170,  171,  171,  356,  171,  171,  171,  171,  171,  174,
      174,  355,  174,  174,  174,  174,  174,  175,  175,  354,
      350,  175,  175,  175,  178,  178,  178,  178,  178,  178,
      178,  178,  187,  187,  349,  187,  187,  348,  187,  347,
      346,  342,  341,  340,  339,  338,  337,  336,  335,  334,

      333,  332,  331,  330,  329,  328,  327,  323,  319,  318,
      317,  316,  315,  311,  310,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  289,
      288,  287,  283,  279,  278,  277,  268,  275,  271,  270,
      267,  263,  259,  258,  257,  256,  255,  254,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  218,
      242,  241,  238,  237,  236,  235,  234,  233,  232,  231,
      230,  227,  226,  210,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  214,  213,  212,  209,  208,  207,  206,
      205,  204,  203,  134,  202,  201,  197,  196,  195,  194,

      191,  134,  186,  163,  162,  161,  160,  159,  158,  155,
      154,  151,  150,  149,  148,  147,  146,  145,  144,  134,
      435,   63,   63,   63,   63,  101,  101,   92,   92,   59,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435
    } ;

static const flex_int16_t yy_chk[786] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,  444,   25,   25,   27,   25,   26,   26,   27,   26,
       47,   47,   17,   17,   17,   17,   25,   28,   48,   48,
       26,   28,   61,   57,   61,   67,   64,   78,   67,  432,

       31,   64,   31,   99,   78,  431,   99,   31,   17,   17,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   31,   32,   39,   32,
       95,  371,  371,   95,   32,   57,   57,   18,   18,   18,
       18,   58,   57,   57,   95,   40,   41,   41,  113,   39,
       41,   39,   39,   32,   81,  113,   42,   42,   39,   39,
       42,  149,   81,   18,   18,   33,   40,  427,   40,   40,
       41,   41,  377,  377,   88,   40,   40,   41,   41,  149,
       42,   42,   88,   58,   58,  426,  425,   42,   42,   96,
       58,   58,   96,   33,  110,  105,  110,   33,  105,  115,

       33,  424,   33,   96,   33,  120,  112,  115,   33,  112,
       33,   33,  423,  120,   33,   34,   65,  421,   65,   65,
       65,   65,   65,   66,   66,   66,   66,   66,   68,  122,
       68,   68,   68,   68,   68,  223,  133,  122,  133,  168,
      163,  169,  168,   34,  169,  223,  171,   34,  163,  171,
       34,  420,   34,  168,   34,  169,  172,  419,   34,  172,
       34,   34,  418,  417,   34,   35,   35,   35,  137,  137,
      137,  137,  137,   35,  138,  416,  138,  138,  138,  138,
      138,  139,  139,  139,  139,  139,  179,  179,  179,  179,
      179,  188,   35,  188,   35,  370,   35,  370,  197,  340,

       35,  415,  340,   35,  413,   35,  197,   35,  218,  218,
      218,   35,  412,   35,   35,  411,  408,   35,   35,   36,
       36,   36,  220,  220,  220,  407,  142,   36,  142,  142,
      142,  142,  142,  180,  180,  180,  180,  180,  226,  226,
      226,  228,  228,  228,  228,  228,   36,  376,   36,  376,
       36,  234,  234,  234,   36,  406,  405,   36,  404,   36,
      390,   36,  236,  236,  236,   36,  389,   36,   36,  388,
      387,   36,   36,   37,  229,  229,  229,  229,  229,  241,
      241,  241,  257,  257,  257,  263,  263,  263,  276,  276,
      276,  276,  276,  278,  278,  278,  283,  283,  283,  386,

      385,   37,  311,  311,  311,   37,  384,  383,   37,  382,
       37,  323,  323,  323,  380,   37,   37,  378,   37,   37,
      375,  373,   37,   37,  106,  106,  106,  106,  106,  372,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      357,  356,  355,  353,  352,  351,  106,  350,  349,  346,
      106,  345,  344,  343,  342,  339,  106,  338,  337,  336,
      106,  335,  106,  436,  436,  436,  436,  436,  436,  436,
      436,  437,  437,  437,  437,  437,  437,  437,  437,  438,
      438,  438,  438,  438,  438,  438,  438,  439,  439,  439,
      439,  439,  439,  439,  439,  440,  440,  440,  440,  440,

      440,  440,  440,  441,  441,  441,  441,  441,  441,  441,
      441,  442,  442,  442,  442,  442,  442,  442,  442,  443,
      443,  443,  443,  443,  443,  443,  443,  445,  445,  334,
      445,  445,  445,  445,  445,  446,  333,  332,  446,  446,
      446,  446,  446,  447,  447,  331,  447,  330,  447,  447,
      447,  448,  448,  329,  448,  448,  448,  448,  448,  449,
      449,  328,  449,  449,  449,  449,  449,  450,  450,  327,
      319,  450,  450,  450,  451,  451,  451,  451,  451,  451,
      451,  451,  452,  452,  318,  452,  452,  317,  452,  316,
      315,  310,  306,  305,  304,  303,  302,  301,  300,  299,

      298,  297,  296,  295,  289,  288,  287,  279,  271,  270,
      269,  268,  267,  259,  258,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  244,  243,  242,  240,
      239,  238,  235,  233,  232,  231,  230,  227,  225,  224,
      222,  219,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  198,  196,  195,  194,  193,  192,  191,  190,  189,
      186,  165,  164,  162,  161,  160,  159,  158,  157,  156,
      155,  154,  153,  152,  151,  150,  148,  147,  146,  145,
      144,  136,  135,  134,  128,  125,  119,  118,  117,  116,

      114,  111,  107,   87,   86,   85,   84,   83,   82,   80,
       79,   77,   76,   75,   74,   73,   72,   71,   70,   62,
       59,   56,   55,   54,   53,   30,   29,    4,    3,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435,  435,  435,  435,  435,  435,
      435,  435,  435,  435,  435
    } ;

static const flex_int16_t yy_rule_linenum[91] =
    {   0,
       99,  103,  108,  112,  117,  121,  125,  128,  133,  137,
      141,  147,  150,  156,  157,  158,  159,  160,  161,  162,
      163,  164,  165,  166,  167,  168,  169,  170,  171,  172,
      173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
      183,  184,  185,  188,  193,  198,  205,  206,  207,  209,
      213,  214,  220,  227,  232,  239,  247,  252,  253,  254,
      255,  256,  257,  258,  268,  277,  292,  299,  309,  314,
      317,  323,  326,  331,  332,  333,  337,  341,  347,  350,
      371,  372,  373,  374,  391,  392,  393,  436,  437,  438
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
#line 2 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
    #include <cerrno>
    #include <climits>
    #include <cstdlib>
    #include <cstring> // strerror
    #include <string>
    #include <iostream>
    #include "Driver.hpp"
    #include "Scanner.hpp"
	#pragma warning(push, 0)
	#include "Parser.hpp"
    #define MAX_STR_CONST 16382 // TODO: Change this and make it dynamic... functions could be big

    int  bracket_level = 0;
    char  *string_buf_ptr;
    #define CURRENT_SYMBOL yy::parser::symbol_type(yy::parser::token::yytokentype(*YYText()), loc)

    struct IncludeData {
        IncludeData(YY_BUFFER_STATE s, yy::location ln, const char *fname, std::unique_ptr<std::ifstream> fd = nullptr) :
            state(s), location(ln), file_name(fname), fileToClose(std::move(fd)) {}
        YY_BUFFER_STATE state;
        yy::location    location;
        std::string     file_name; // the name of the current file (when in #include, for example)
        std::unique_ptr<std::ifstream>   fileToClose; // keep track of the file descriptor to make sure we will close it
    };
    std::stack<IncludeData> include_stack;

    // we need to do this because yy_pop_state is generated as static
    //static void yy_pop_state();
    #if 0
    void lex_pop_state()
    {
        yy_pop_state();
    }
    #endif
    bool return_from_func = true;
    void print_state(int state);
    void print_current_state();
  const char* state_to_string(int state);

    void Scanner::print_state()
    {
      ::print_state(YY_START);
    }


#line 854 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"
#define YY_NO_INPUT 1
#line 57 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
  // A number symbol corresponding to the value in S.
  yy::parser::symbol_type make_INT(
    const std::string &s,
    const yy::parser::location_type& loc
  );

    yy::parser::symbol_type make_FLOAT(
    const std::string &s,
    const yy::parser::location_type& loc
    );
#line 867 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

#line 79 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
  // Code run each time a pattern is matched.
  # define YY_USER_ACTION  \
  loc.columns (yyleng);\
  //::print_state(YY_START);\
  //CryLog("Current token text: %s", YYText());
#line 875 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"
#line 876 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

#define INITIAL 0
#define skiptoendofline 1
#define ifdef 2
#define endif 3
#define getname 4
#define define 5
#define defname 6
#define defval 7
#define fbo 8
#define fbo1 9
#define clearmode 10
#define rendermode 11
#define incl 12
#define comment 13
#define comment2 14
#define str 15
#define function 16
#define functionbody 17
#define cstbuffer 18
#define technique 19
#define pass 20
#define sampler_state 21
#define dst_state 22
#define pr_state 23
#define color_sample_state 24
#define rasterization_state 25
#define resource 26
#define resource1 27
#define input_layout 28

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 85 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"


#line 88 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
  // A handy shortcut to the location held by the driver.
  yy::location& loc = driver.location;
  // Code run each time yylex is called.
  loc.step();
  int  comment_caller;
  char  string_buf[MAX_STR_CONST];
  //string_buf.clear();
  //CryLog("Begin yylex");



#line 1111 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 436 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 435 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 91 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 91 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 92 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 99 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_FATALERROR(loc);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 103 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
    yy_push_state(technique);
	return yy::parser::make_TECHNIQUE(loc);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 108 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
  CryError("REGISTER");
	return yy::parser::make_REGISTER(loc);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 112 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
  CryLog("[[fn]]");
  yy_push_state(function);
  print_state();
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 117 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
  yy_push_state(cstbuffer);
	return yy::parser::make_CSTBUFFER(loc);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 121 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
  yy_push_state(cstbuffer);
	return yy::parser::make_CONSTANTBUFFER(loc);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 125 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_TEXTURE2D_TYPE(loc);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 128 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_SAMPLERSTATE(loc);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 133 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_STRUCT(loc);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 137 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_INSPECYFIER(loc);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 141 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_OUTSPECYFIER(loc);
}
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 147 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        return CURRENT_SYMBOL;
    }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 150 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        //yy_pop_state();
        return CURRENT_SYMBOL;
    }
	YY_BREAK


case 14:
YY_RULE_SETUP
#line 156 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_VOID_TYPE(loc);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 157 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_UNSIGNED(loc);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 158 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT_TYPE(loc);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 159 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT2_TYPE(loc);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 160 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT3_TYPE(loc);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 161 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT4_TYPE(loc);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 162 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT2_TYPE(loc);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 163 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT3_TYPE(loc);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 164 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT4_TYPE(loc);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 165 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT2_TYPE(loc);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 166 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT3_TYPE(loc);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 167 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT4_TYPE(loc);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 168 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT2_TYPE(loc);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 169 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT2x4_TYPE(loc);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 170 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT3_TYPE(loc);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 171 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT34_TYPE(loc);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 172 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT4_TYPE(loc);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 173 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_BOOL_TYPE(loc);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 174 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_BOOL2_TYPE(loc);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 175 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_BOOL3_TYPE(loc);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 176 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_BOOL4_TYPE(loc);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 177 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT_TYPE(loc);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 178 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT2_TYPE(loc);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 179 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT3_TYPE(loc);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 180 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT4_TYPE(loc);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 181 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT2_TYPE(loc);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 182 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT3_TYPE(loc);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 183 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT4_TYPE(loc);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 184 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_UNIFORM(loc);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 185 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_STRING_TYPE(loc);
	YY_BREAK

case 44:
YY_RULE_SETUP
#line 188 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_VERTEXFORMAT(loc);
	YY_BREAK
/*==================================================================
      Comment starting points
    */
case 45:
YY_RULE_SETUP
#line 193 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
    comment_caller  =  INITIAL;
    yy_push_state(comment);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 198 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
    comment_caller  =  YY_START;
    yy_push_state(comment2);
    ::print_state(YY_START);
}
	YY_BREAK

case 47:
YY_RULE_SETUP
#line 205 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
/*  eat  anything  that's  not  a  '*'  */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 206 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
/*  eat  up  '*'s  not  followed  by  '/'s  */
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 207 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
loc.lines (yyleng); loc.step ();
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 209 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
yy_pop_state();//BEGIN(comment_caller);
	YY_BREAK


case 51:
YY_RULE_SETUP
#line 213 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"

	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 214 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
loc.lines (yyleng); loc.step (); yy_pop_state();//BEGIN(comment_caller);
	YY_BREAK

/*==================================================================
      Start of string
    */

case 53:
YY_RULE_SETUP
#line 220 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
string_buf_ptr  =  string_buf;  yy_push_state(str);
	YY_BREAK

/*==================================================================
      rules for inside a string
    */

case 54:
YY_RULE_SETUP
#line 227 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{  /*  saw  closing  quote  -  all  done  */
        yy_pop_state();//BEGIN(INITIAL);
        *string_buf_ptr  =  '\0';
        return yy::parser::make_STR(string_buf, loc);
    }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 232 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        //FIXME:
        //fprintf(stderr,"\nunterminated  string  constant at line %d\n", line_num);
        //yyterminate();
        gEnv->pLog->LogError("\nunterminated  string  constant at unknown line, FIXME!!!");
		return yy::parser::make_END (loc);
    }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 239 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        /*  octal  escape  sequence  */
        int  result;
        (void)  sscanf(  yytext  +  1,  "%o",  &result  );
        if  (  result  >  0xff  )
            /*  error,  constant  is  out-of-bounds  */
        *string_buf_ptr++  =  result;
    }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 247 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        /*  generate  error  -  bad  escape  sequence;  something
        *  like  '\48'  or  '\0777777'
        */
    }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 252 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  '\n';
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 253 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  '\t';
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 254 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  '\r';
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 255 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  '\b';
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 256 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  '\f';
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 257 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  yytext[1];
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 258 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        char  *yptr  =  yytext;
        while  (  *yptr  )
        *string_buf_ptr++  =  *yptr++;
    }
	YY_BREAK

/*==================================================================
      rules for inside a GLSL section
    */

case 65:
YY_RULE_SETUP
#line 268 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        bracket_level = 1; // must be one...
        string_buf_ptr  =  string_buf;
        *string_buf_ptr = '\0';
        yy_push_state(functionbody);
        return CURRENT_SYMBOL;
    }
	YY_BREAK

case 66:
YY_RULE_SETUP
#line 277 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        //CryLog("bracket level: %d", bracket_level);
        bracket_level--;
        if((bracket_level) == 0)
        {
            *string_buf_ptr  =  '\0';
            // shall I just do BEGIN(INITIAL) ?
            yy_pop_state(); // back to shader
            yy_pop_state();// back to INITIAL
            return_from_func = true;
            return yy::parser::make_CODEBODY(string_buf, loc);
        } else {
            *string_buf_ptr++  =  yytext[0];
        }
    }
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 292 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{  /*copy the GLSL data*/
        char  *yptr  =  yytext;
        while  (  *yptr  )
        *string_buf_ptr++  =  *yptr++;
        //TODO:
		loc.lines (yyleng); loc.step ();
    }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 299 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{  /*copy the GLSL data*/
        //CryLog("Copy function data");
        char  *yptr  =  yytext;
        while  (  *yptr  )
        *string_buf_ptr++  =  *yptr++;
    }
	YY_BREAK
/*==================================================================
      rules for inside a  section
    */

case 69:
YY_RULE_SETUP
#line 309 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        comment_caller  =  INITIAL;
        yy_push_state(pass);
		return yy::parser::make_PASS(loc);
    }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 314 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
		return CURRENT_SYMBOL;
    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 317 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        //yy_pop_state();//BEGIN(INITIAL);
		return CURRENT_SYMBOL;
    }
	YY_BREAK


case 72:
YY_RULE_SETUP
#line 323 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        return CURRENT_SYMBOL;
    }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 326 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        //yy_pop_state();
        return CURRENT_SYMBOL;
    }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 331 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_VERTEXPROGRAM(IShader::Type::E_VERTEX, loc);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 332 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FRAGMENTPROGRAM(IShader::Type::E_FRAGMENT, loc);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 333 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_GEOMETRYPROGRAM(IShader::Type::E_GEOMETRY, loc);
	YY_BREAK


case 77:
YY_RULE_SETUP
#line 337 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        CryLog("{pass,pr_state,input_layout");
		return CURRENT_SYMBOL;
    }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 341 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        CryLog("}pass,pr_state,input_layout");
		return CURRENT_SYMBOL;
    }
	YY_BREAK

case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 347 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
    loc.lines (yyleng); loc.step ();
}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 350 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
    loc.step ();
}
	YY_BREAK
/*
"-"        {
              std::cout << loc.begin.line << " " << loc.end.line << std::endl;
              return yy::parser::make_MINUS  (loc);
           }
"+"        return yy::parser::make_PLUS   (loc);
"*"        return yy::parser::make_STAR   (loc);
"/"        return yy::parser::make_SLASH  (loc);
"("        return yy::parser::make_LPAREN (loc);
")"        return yy::parser::make_RPAREN (loc);
"="        return yy::parser::make_ASSIGN (loc);
";"        return yy::parser::make_SEMICOLON(loc);
"{"        return yy::parser::make_LEFTSCOPE(loc);
"}"        return yy::parser::make_RIGHTSCOPE(loc);
","        return yy::parser::make_COMMA(loc);
    */
case 81:
YY_RULE_SETUP
#line 371 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return make_INT(yytext, loc);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 372 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return make_FLOAT(yytext, loc);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 373 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return check_type(yytext, loc);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 374 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{   
    if((yytext[0] >= 33) && (yytext[0] <= 126))
        return CURRENT_SYMBOL;
    else {
        CryLog("Warning: line %d : odd character found (%u)...\n", 0xffff, (unsigned char)yytext[0]);
    }
    return CURRENT_SYMBOL;
}
	YY_BREAK
/*==================================================================
      ==================================================================
      !! SIMPLIFIED PREPROCESSOR !!
      More complex preprocessor would require a complete parser that would
      pre-process the code. Here we avoid doing so : directly loading nested 
      includes : Not even using the grammar analyzer !
      ==================================================================
      ==================================================================
    */
case 85:
YY_RULE_SETUP
#line 391 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
BEGIN(incl);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 392 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
/*  eat  the  whitespace and " or < as often in #include */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 393 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{  /*  got  the  include  file  name  */
    char * s = (char*)strchr(YYText(), '\"'); // get rid of the quote or >
    if(!s) s = (char*)strchr(YYText(), '>');
    if(s)
        *s = '\0';
    include_stack.push(IncludeData(YY_CURRENT_BUFFER, driver.location, driver.file.c_str()));
    driver.file = "Data/shaders/fx/" + std::string(YYText());
    driver.location.initialize(&driver.file);
    //line_num  = 1;
    //FILE *fd = NULL;
    std::unique_ptr<std::ifstream> fd;
    const char *buf = NULL;
    #if 0
    if(nvFX::g_includeCb)
        nvFX::g_includeCb(YYText(), fd, buf);
    if(buf)
        yy_switch_to_buffer(yy_scan_string(buf) );
    else if(fd)
        yy_switch_to_buffer(yy_create_buffer(fd, YY_BUF_SIZE));
    else 
    #else
    {
        fd  =  std::make_unique<std::ifstream>(driver.file);
        if(!fd->is_open())
        {
            CryError("err loading file %s", YYText());
        } else {
            CryLog("Including file %s", YYText());
            yy_switch_to_buffer( yy_create_buffer(fd.get(), YY_BUF_SIZE));
        }
    }
    #endif
    if(fd->is_open())
    {
        // let's keep track of this newly opened file : when poping, we will have to close it
        IncludeData &incData = include_stack.top();
        incData.fileToClose = std::move(fd);
        BEGIN(INITIAL);
    } else {
        YY_FATAL_ERROR( "failure in including a file" );
    }
}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 436 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
BEGIN(skiptoendofline);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 437 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"

	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 438 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(skiptoendofline):
case YY_STATE_EOF(ifdef):
case YY_STATE_EOF(endif):
case YY_STATE_EOF(getname):
case YY_STATE_EOF(define):
case YY_STATE_EOF(defname):
case YY_STATE_EOF(defval):
case YY_STATE_EOF(fbo):
case YY_STATE_EOF(fbo1):
case YY_STATE_EOF(clearmode):
case YY_STATE_EOF(rendermode):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(comment2):
case YY_STATE_EOF(str):
case YY_STATE_EOF(function):
case YY_STATE_EOF(functionbody):
case YY_STATE_EOF(cstbuffer):
case YY_STATE_EOF(technique):
case YY_STATE_EOF(pass):
case YY_STATE_EOF(sampler_state):
case YY_STATE_EOF(dst_state):
case YY_STATE_EOF(pr_state):
case YY_STATE_EOF(color_sample_state):
case YY_STATE_EOF(rasterization_state):
case YY_STATE_EOF(resource):
case YY_STATE_EOF(resource1):
case YY_STATE_EOF(input_layout):
#line 440 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	if(include_stack.empty())//(  --include_stack_ptr  <  0  )
    {
        return yy::parser::make_END(loc);
        //yyterminate();
    }
    else
    {
        yy_delete_buffer(  YY_CURRENT_BUFFER  );
        IncludeData &incData = include_stack.top();
        yy_switch_to_buffer(incData.state);//[include_stack_ptr]);
        driver.location = incData.location;
        driver.file = incData.file_name;
        if(incData.fileToClose->is_open())
            incData.fileToClose->close();
        include_stack.pop();
    }
}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 459 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
ECHO;
	YY_BREAK
#line 1925 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 436 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 436 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 435);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 459 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"


yy::parser::symbol_type make_INT(
  const std::string &s,
  const yy::parser::location_type& loc
) {
  errno = 0;
  long n = strtol(s.c_str(), NULL, 10);
  if (! (INT_MIN <= n && n <= INT_MAX && errno != ERANGE))
    throw yy::parser::syntax_error(loc, "integer is out of range: " + s);
  return yy::parser::make_INT((int) n, loc);
}

yy::parser::symbol_type make_FLOAT(
  const std::string &s,
  const yy::parser::location_type& loc
) {
  errno = 0;
  char* stop_str;
  float n = strtof(s.c_str(), &stop_str);
  if (errno == ERANGE)
    throw yy::parser::syntax_error(loc, "float is out of range: " + s);
  return yy::parser::make_FLOAT((float) n, loc);
}

#include <stack>
#include <fstream>
#include <BlackBox/System/ISystem.hpp>

//#include "Parser.hpp"
//#include "Scanner.hpp"

std::stack<std::shared_ptr<std::ifstream>> includes;
bool Scanner::MakeInclude(const char* file_name)
{
	bool result = false;
	CryLog("include <%s>", file_name);
	//include_stack.push(IncludeData(YY_CURRENT_BUFFER, lineno(), driver.file.c_str()));
	auto includeFile = std::make_shared<std::ifstream>(std::ifstream((std::string("res/shaders/fx/") + file_name)));
	const char* buf	 = nullptr;
	{
		//driver.stream = std::ifstream(file_name);
		if (!includeFile->is_open())
		{
			gEnv->pLog->LogError("[FX] File %s not found", file_name);
			LexerError("failure in including a file");
			return result;
		}
		includes.emplace(includeFile);
		gEnv->pLog->Log("$3[FX] File %s opened", file_name);
		yypush_buffer_state(yy_create_buffer(includes.top().get(), YY_BUF_SIZE));
		//yyrestart(includeFile);
		result = true;
	}
	return result;
}

void Scanner::eof()
{
	yypop_buffer_state();
	gEnv->pLog->LogError("$3[FX] File %s ended", driver.file.c_str());
	//yypop_buffer_state();
	//driver.file = incData.file_name;
	//driver.location.initialize(&driver.file);

#if 0
	if(incData.fileToClose)
		fclose(incData.fileToClose);
#endif
	//include_stack.pop();
}

  yy::parser::symbol_type Scanner::check_type(
    const std::string &s,
    const yy::parser::location_type& loc
  )
  {
	  if (auto it = symboltype_map.find(s); it != symboltype_map.end())
	  {
          //CryLog("%s: Its type!!!", s.data());
		return yy::parser::make_TYPE_NAME(s, loc); 
	  }
      else {
          //CryLog("%s: Its ident!!!", s.data());
        return yy::parser::make_IDENTIFIER(s, loc);
      }
  }


const char* state_to_string(int state)
{
    static char buffer[256];
    char* cState{};
    switch(state)
    {
        case ifdef: cState = "ifdef"; break; 
        case endif: cState = "endif"; break;
        case getname: cState = "getname"; break;
        case define: cState = "define"; break;
        case defname: cState = "defname"; break;
        case defval: cState = "defval"; break;
        case fbo: cState = "fbo"; break;
        case fbo1: cState = "fbo1"; break;
        case clearmode: cState = "clearmode"; break;
        case rendermode: cState = "rendermode"; break;
        case incl: cState = "incl"; break;
        case comment: cState = "comment"; break;
        case comment2: cState = "comment2"; break;
        case str: cState = "str"; break;
        case function: cState = "function"; break;
        case functionbody: cState = "functionbody"; break;
        case cstbuffer: cState = "cstbuffer"; break;
        case technique: cState = "technique"; break;
        case pass: cState = "pass"; break;
        case sampler_state: cState = "sampler_state"; break;
        case dst_state: cState = "dst_state"; break;
        case pr_state: cState = "pr_state"; break;
        case color_sample_state: cState = "color_sample_state"; break;
        case rasterization_state: cState = "rasterization_state"; break;
        case resource: cState = "resource"; break;
        case resource1: cState = "resource1"; break;
        case input_layout: cState = "input_layout"; break;
        case INITIAL: cState = "INITIAL"; break;
        default: cState = "unknown";
    }

    sprintf(buffer, "%s(%d)", cState, state);
    return buffer;
}

void print_state(int state){
  //CryLog("$1Current state: %s", state_to_string(state));
}

#if 0
void print_current_state()
{
  print_state(YY_START);
}
#endif


#pragma warning(pop)

