Терминалы не используются в грамматике

    TRUE
    FALSE
    BOOL
    VOID_TYPE
    HIGHP
    MEDIUMP
    LOWP
    UNIFORM
    TEXTURE1D_TYPE
    TEXTURE2D_TYPE
    TEXTURE2DSHADOW_TYPE
    TEXTURE2DRECT_TYPE
    TEXTURE3D_TYPE
    TEXTURECUBE_TYPE
    SAMPLER1D_TYPE
    SAMPLER2D_TYPE
    SAMPLER2DSHADOW_TYPE
    SAMPLER2DRECT_TYPE
    SAMPLER3D_TYPE
    SAMPLERCUBE_TYPE
    EXTENSION
    SEPARATE_SHADER
    HULLPROGRAM
    EVALPROGRAM
    SHDPROFILE
    SAMPLERRESOURCE
    SAMPLERTEXUNIT
    SETSAMPLERSTATE
    SETDSTSTATE
    SETRASTERIZATIONSTATE
    SETCOLORSAMPLESTATE
    IMAGERESOURCE
    IMAGEUNIT
    IMAGEACCESS
    IMAGELAYER
    IMAGELAYERED
    WRITE_ONLY
    READ_ONLY
    READ_WRITE
    VERTEXFORMAT


Грамматика

    0 $accept: input "end of file"

    1 input: ε
    2      | input ';'
    3      | input tech
    4      | input hlsl
    5      | input var_decl
    6      | input shader_resource
    7      | input function_definition
    8      | input function_declaration
    9      | input fatal_error
   10      | input struct
   11      | input error

   12 arguments: var_decl
   13          | var_decl ',' arguments

   14 $@1: ε

   15 function_definition: function_declaration '{' $@1 CODEBODY

   16 function_declaration: TYPE_NAME IDENTIFIER '(' arguments ')'

   17 fatal_error: FATALERROR

   18 register_declaration: ':' REGISTER '(' INT ')'
   19                     | ε

   20 cbuffer: CSTBUFFER IDENTIFIER register_declaration '{' var_decls '}'

   21 struct: STRUCT struct_header struct_body struct_footer

   22 struct_header: IDENTIFIER
   23              | ε

   24 struct_body: '{' var_decls '}'

   25 struct_footer: IDENTIFIER
   26              | ε

   27 var_decls: var_decls var_decl ';'
   28          | var_decl ';'
   29          | struct ';'

   30 shader_resource: cbuffer

   31 shader_type: VERTEXPROGRAM
   32            | GEOMETRYPROGRAM
   33            | FRAGMENTPROGRAM

   34 shader_assignment: shader_type '=' IDENTIFIER

   35 shader_assignments: shader_assignment
   36                   | shader_assignments shader_assignment

   37 passstates: '{' shader_assignments '}'

   38 base_type: FLOAT_TYPE
   39          | FLOAT2_TYPE
   40          | FLOAT3_TYPE
   41          | FLOAT4_TYPE
   42          | INT_TYPE
   43          | INT2_TYPE
   44          | INT3_TYPE
   45          | INT4_TYPE
   46          | BOOL_TYPE
   47          | BOOL2_TYPE
   48          | BOOL3_TYPE
   49          | BOOL4_TYPE
   50          | MAT2_TYPE
   51          | MAT3_TYPE
   52          | MAT4_TYPE

   53 semantic: ':' IDENTIFIER
   54         | ε

   55 var_decl: base_type IDENTIFIER semantic
   56         | base_type IDENTIFIER semantic annotations '=' INT
   57         | base_type IDENTIFIER semantic annotations '=' FLOAT

   58 $@2: ε

   59 pass: PASS $@2 annotations passstates

   60 $@3: ε

   61 pass: PASS IDENTIFIER $@3 annotations passstates

   62 passes: pass
   63       | passes pass
   64       | passes error

   65 $@4: ε

   66 tech: TECHNIQUE $@4 '{' passes '}'

   67 $@5: ε

   68 tech: TECHNIQUE IDENTIFIER $@5 annotations '{' passes '}'

   69 scalar_type: INT_TYPE
   70            | FLOAT_TYPE
   71            | UNSIGNED
   72            | STRING_TYPE

   73 annotation_list: annotation_list annotation
   74                | annotation

   75 annotation_value: FLOAT
   76                 | INT
   77                 | STR
   78                 | UNSIGNED

   79 annotation: scalar_type IDENTIFIER '=' annotation_value ';'

   80 annotations: ε
   81            | '<' annotation_list '>'

   82 hlsl_header: HLSL11SHADER IDENTIFIER
   83            | HLSL11SHADER

   84 hlsl: shader_header '{' CODEBODY

   85 shader_header: hlsl_header annotations


Терминальные символы с правилами, в которых они появляются

    "end of file" (0) 0
    '(' (40) 16 18
    ')' (41) 16 18
    ',' (44) 13
    ':' (58) 18 53
    ';' (59) 2 27 28 29 79
    '<' (60) 81
    '=' (61) 34 56 57 79
    '>' (62) 81
    '{' (123) 15 20 24 37 66 68 84
    '}' (125) 20 24 37 66 68
    error (256) 11 64
    TYPE_NAME <std::string> (258) 16
    IDENTIFIER <std::string> (259) 16 20 22 25 34 53 55 56 57 61 68 79 82
    TRUE <bool> (260)
    FALSE <bool> (261)
    FLOAT <float> (262) 57 75
    INT <int> (263) 18 56 76
    BOOL <bool> (264)
    STR <std::string> (265) 77
    HLSL11SHADER (266) 82 83
    TECHNIQUE (267) 66 68
    PASS (268) 59 61
    CODEBODY <std::string> (269) 15 84
    STRING_TYPE (270) 72
    VOID_TYPE (271)
    UNSIGNED (272) 71 78
    HIGHP (273)
    MEDIUMP (274)
    LOWP (275)
    UNIFORM (276)
    CSTBUFFER (277) 20
    FLOAT_TYPE (278) 38 70
    FLOAT2_TYPE (279) 39
    FLOAT3_TYPE (280) 40
    FLOAT4_TYPE (281) 41
    MAT2_TYPE (282) 50
    MAT3_TYPE (283) 51
    MAT4_TYPE (284) 52
    BOOL_TYPE (285) 46
    BOOL2_TYPE (286) 47
    BOOL3_TYPE (287) 48
    BOOL4_TYPE (288) 49
    INT_TYPE (289) 42 69
    INT2_TYPE (290) 43
    INT3_TYPE (291) 44
    INT4_TYPE (292) 45
    TEXTURE1D_TYPE (293)
    TEXTURE2D_TYPE (294)
    TEXTURE2DSHADOW_TYPE (295)
    TEXTURE2DRECT_TYPE (296)
    TEXTURE3D_TYPE (297)
    TEXTURECUBE_TYPE (298)
    SAMPLER1D_TYPE (299)
    SAMPLER2D_TYPE (300)
    SAMPLER2DSHADOW_TYPE (301)
    SAMPLER2DRECT_TYPE (302)
    SAMPLER3D_TYPE (303)
    SAMPLERCUBE_TYPE (304)
    EXTENSION (305)
    SEPARATE_SHADER (306)
    VERTEXPROGRAM <IShader::Type> (307) 31
    FRAGMENTPROGRAM <IShader::Type> (308) 33
    GEOMETRYPROGRAM <IShader::Type> (309) 32
    HULLPROGRAM <IShader::Type> (310)
    EVALPROGRAM <IShader::Type> (311)
    SHDPROFILE (312)
    SAMPLERRESOURCE (313)
    SAMPLERTEXUNIT (314)
    SETSAMPLERSTATE (315)
    SETDSTSTATE (316)
    SETRASTERIZATIONSTATE (317)
    SETCOLORSAMPLESTATE (318)
    IMAGERESOURCE (319)
    IMAGEUNIT (320)
    IMAGEACCESS (321)
    IMAGELAYER (322)
    IMAGELAYERED (323)
    WRITE_ONLY (324)
    READ_ONLY (325)
    READ_WRITE (326)
    VERTEXFORMAT (327)
    REGISTER (328) 18
    FATALERROR (329) 17
    STRUCT (330) 21


Нетерминальные символы с правилами, в которых они появляются

    $accept (86)
        on left: 0
    input (87)
        on left: 1 2 3 4 5 6 7 8 9 10 11
        on right: 0 2 3 4 5 6 7 8 9 10 11
    arguments (88)
        on left: 12 13
        on right: 13 16
    function_definition (89)
        on left: 15
        on right: 7
    $@1 (90)
        on left: 14
        on right: 15
    function_declaration (91)
        on left: 16
        on right: 8 15
    fatal_error (92)
        on left: 17
        on right: 9
    register_declaration (93)
        on left: 18 19
        on right: 20
    cbuffer (94)
        on left: 20
        on right: 30
    struct (95)
        on left: 21
        on right: 10 29
    struct_header (96)
        on left: 22 23
        on right: 21
    struct_body (97)
        on left: 24
        on right: 21
    struct_footer <std::string> (98)
        on left: 25 26
        on right: 21
    var_decls (99)
        on left: 27 28 29
        on right: 20 24 27
    shader_resource (100)
        on left: 30
        on right: 6
    shader_type <IShader::Type> (101)
        on left: 31 32 33
        on right: 34
    shader_assignment <std::string> (102)
        on left: 34
        on right: 35 36
    shader_assignments (103)
        on left: 35 36
        on right: 36 37
    passstates (104)
        on left: 37
        on right: 59 61
    base_type <nvFX::IUniform::Type> (105)
        on left: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52
        on right: 55 56 57
    semantic (106)
        on left: 53 54
        on right: 55 56 57
    var_decl (107)
        on left: 55 56 57
        on right: 5 12 13 27 28
    pass (108)
        on left: 59 61
        on right: 62 63
    $@2 (109)
        on left: 58
        on right: 59
    $@3 (110)
        on left: 60
        on right: 61
    passes (111)
        on left: 62 63 64
        on right: 63 64 66 68
    tech (112)
        on left: 66 68
        on right: 3
    $@4 (113)
        on left: 65
        on right: 66
    $@5 (114)
        on left: 67
        on right: 68
    scalar_type (115)
        on left: 69 70 71 72
        on right: 79
    annotation_list (116)
        on left: 73 74
        on right: 73 81
    annotation_value (117)
        on left: 75 76 77 78
        on right: 79
    annotation (118)
        on left: 79
        on right: 73 74
    annotations (119)
        on left: 80 81
        on right: 56 57 59 61 68 85
    hlsl_header <std::string> (120)
        on left: 82 83
        on right: 85
    hlsl (121)
        on left: 84
        on right: 4
    shader_header <std::string> (122)
        on left: 85
        on right: 84


State 0

    0 $accept: • input "end of file"

    $default  вывод с использованием правила 1 (input)

    input  переход в состояние 1


State 1

    0 $accept: input • "end of file"
    2 input: input • ';'
    3      | input • tech
    4      | input • hlsl
    5      | input • var_decl
    6      | input • shader_resource
    7      | input • function_definition
    8      | input • function_declaration
    9      | input • fatal_error
   10      | input • struct
   11      | input • error

    "end of file"  сдвиг, и переход в состояние 2
    error          сдвиг, и переход в состояние 3
    TYPE_NAME      сдвиг, и переход в состояние 4
    HLSL11SHADER   сдвиг, и переход в состояние 5
    TECHNIQUE      сдвиг, и переход в состояние 6
    CSTBUFFER      сдвиг, и переход в состояние 7
    FLOAT_TYPE     сдвиг, и переход в состояние 8
    FLOAT2_TYPE    сдвиг, и переход в состояние 9
    FLOAT3_TYPE    сдвиг, и переход в состояние 10
    FLOAT4_TYPE    сдвиг, и переход в состояние 11
    MAT2_TYPE      сдвиг, и переход в состояние 12
    MAT3_TYPE      сдвиг, и переход в состояние 13
    MAT4_TYPE      сдвиг, и переход в состояние 14
    BOOL_TYPE      сдвиг, и переход в состояние 15
    BOOL2_TYPE     сдвиг, и переход в состояние 16
    BOOL3_TYPE     сдвиг, и переход в состояние 17
    BOOL4_TYPE     сдвиг, и переход в состояние 18
    INT_TYPE       сдвиг, и переход в состояние 19
    INT2_TYPE      сдвиг, и переход в состояние 20
    INT3_TYPE      сдвиг, и переход в состояние 21
    INT4_TYPE      сдвиг, и переход в состояние 22
    FATALERROR     сдвиг, и переход в состояние 23
    STRUCT         сдвиг, и переход в состояние 24
    ';'            сдвиг, и переход в состояние 25

    function_definition   переход в состояние 26
    function_declaration  переход в состояние 27
    fatal_error           переход в состояние 28
    cbuffer               переход в состояние 29
    struct                переход в состояние 30
    shader_resource       переход в состояние 31
    base_type             переход в состояние 32
    var_decl              переход в состояние 33
    tech                  переход в состояние 34
    hlsl_header           переход в состояние 35
    hlsl                  переход в состояние 36
    shader_header         переход в состояние 37


State 2

    0 $accept: input "end of file" •

    $default  принять


State 3

   11 input: input error •

    $default  вывод с использованием правила 11 (input)


State 4

   16 function_declaration: TYPE_NAME • IDENTIFIER '(' arguments ')'

    IDENTIFIER  сдвиг, и переход в состояние 38


State 5

   82 hlsl_header: HLSL11SHADER • IDENTIFIER
   83            | HLSL11SHADER •

    IDENTIFIER  сдвиг, и переход в состояние 39

    $default  вывод с использованием правила 83 (hlsl_header)


State 6

   66 tech: TECHNIQUE • $@4 '{' passes '}'
   68     | TECHNIQUE • IDENTIFIER $@5 annotations '{' passes '}'

    IDENTIFIER  сдвиг, и переход в состояние 40

    $default  вывод с использованием правила 65 ($@4)

    $@4  переход в состояние 41


State 7

   20 cbuffer: CSTBUFFER • IDENTIFIER register_declaration '{' var_decls '}'

    IDENTIFIER  сдвиг, и переход в состояние 42


State 8

   38 base_type: FLOAT_TYPE •

    $default  вывод с использованием правила 38 (base_type)


State 9

   39 base_type: FLOAT2_TYPE •

    $default  вывод с использованием правила 39 (base_type)


State 10

   40 base_type: FLOAT3_TYPE •

    $default  вывод с использованием правила 40 (base_type)


State 11

   41 base_type: FLOAT4_TYPE •

    $default  вывод с использованием правила 41 (base_type)


State 12

   50 base_type: MAT2_TYPE •

    $default  вывод с использованием правила 50 (base_type)


State 13

   51 base_type: MAT3_TYPE •

    $default  вывод с использованием правила 51 (base_type)


State 14

   52 base_type: MAT4_TYPE •

    $default  вывод с использованием правила 52 (base_type)


State 15

   46 base_type: BOOL_TYPE •

    $default  вывод с использованием правила 46 (base_type)


State 16

   47 base_type: BOOL2_TYPE •

    $default  вывод с использованием правила 47 (base_type)


State 17

   48 base_type: BOOL3_TYPE •

    $default  вывод с использованием правила 48 (base_type)


State 18

   49 base_type: BOOL4_TYPE •

    $default  вывод с использованием правила 49 (base_type)


State 19

   42 base_type: INT_TYPE •

    $default  вывод с использованием правила 42 (base_type)


State 20

   43 base_type: INT2_TYPE •

    $default  вывод с использованием правила 43 (base_type)


State 21

   44 base_type: INT3_TYPE •

    $default  вывод с использованием правила 44 (base_type)


State 22

   45 base_type: INT4_TYPE •

    $default  вывод с использованием правила 45 (base_type)


State 23

   17 fatal_error: FATALERROR •

    $default  вывод с использованием правила 17 (fatal_error)


State 24

   21 struct: STRUCT • struct_header struct_body struct_footer

    IDENTIFIER  сдвиг, и переход в состояние 43

    $default  вывод с использованием правила 23 (struct_header)

    struct_header  переход в состояние 44


State 25

    2 input: input ';' •

    $default  вывод с использованием правила 2 (input)


State 26

    7 input: input function_definition •

    $default  вывод с использованием правила 7 (input)


State 27

    8 input: input function_declaration •
   15 function_definition: function_declaration • '{' $@1 CODEBODY

    '{'  сдвиг, и переход в состояние 45

    $default  вывод с использованием правила 8 (input)


State 28

    9 input: input fatal_error •

    $default  вывод с использованием правила 9 (input)


State 29

   30 shader_resource: cbuffer •

    $default  вывод с использованием правила 30 (shader_resource)


State 30

   10 input: input struct •

    $default  вывод с использованием правила 10 (input)


State 31

    6 input: input shader_resource •

    $default  вывод с использованием правила 6 (input)


State 32

   55 var_decl: base_type • IDENTIFIER semantic
   56         | base_type • IDENTIFIER semantic annotations '=' INT
   57         | base_type • IDENTIFIER semantic annotations '=' FLOAT

    IDENTIFIER  сдвиг, и переход в состояние 46


State 33

    5 input: input var_decl •

    $default  вывод с использованием правила 5 (input)


State 34

    3 input: input tech •

    $default  вывод с использованием правила 3 (input)


State 35

   85 shader_header: hlsl_header • annotations

    '<'  сдвиг, и переход в состояние 47

    $default  вывод с использованием правила 80 (annotations)

    annotations  переход в состояние 48


State 36

    4 input: input hlsl •

    $default  вывод с использованием правила 4 (input)


State 37

   84 hlsl: shader_header • '{' CODEBODY

    '{'  сдвиг, и переход в состояние 49


State 38

   16 function_declaration: TYPE_NAME IDENTIFIER • '(' arguments ')'

    '('  сдвиг, и переход в состояние 50


State 39

   82 hlsl_header: HLSL11SHADER IDENTIFIER •

    $default  вывод с использованием правила 82 (hlsl_header)


State 40

   68 tech: TECHNIQUE IDENTIFIER • $@5 annotations '{' passes '}'

    $default  вывод с использованием правила 67 ($@5)

    $@5  переход в состояние 51


State 41

   66 tech: TECHNIQUE $@4 • '{' passes '}'

    '{'  сдвиг, и переход в состояние 52


State 42

   20 cbuffer: CSTBUFFER IDENTIFIER • register_declaration '{' var_decls '}'

    ':'  сдвиг, и переход в состояние 53

    $default  вывод с использованием правила 19 (register_declaration)

    register_declaration  переход в состояние 54


State 43

   22 struct_header: IDENTIFIER •

    $default  вывод с использованием правила 22 (struct_header)


State 44

   21 struct: STRUCT struct_header • struct_body struct_footer

    '{'  сдвиг, и переход в состояние 55

    struct_body  переход в состояние 56


State 45

   15 function_definition: function_declaration '{' • $@1 CODEBODY

    $default  вывод с использованием правила 14 ($@1)

    $@1  переход в состояние 57


State 46

   55 var_decl: base_type IDENTIFIER • semantic
   56         | base_type IDENTIFIER • semantic annotations '=' INT
   57         | base_type IDENTIFIER • semantic annotations '=' FLOAT

    ':'  сдвиг, и переход в состояние 58

    $default  вывод с использованием правила 54 (semantic)

    semantic  переход в состояние 59


State 47

   81 annotations: '<' • annotation_list '>'

    STRING_TYPE  сдвиг, и переход в состояние 60
    UNSIGNED     сдвиг, и переход в состояние 61
    FLOAT_TYPE   сдвиг, и переход в состояние 62
    INT_TYPE     сдвиг, и переход в состояние 63

    scalar_type      переход в состояние 64
    annotation_list  переход в состояние 65
    annotation       переход в состояние 66


State 48

   85 shader_header: hlsl_header annotations •

    $default  вывод с использованием правила 85 (shader_header)


State 49

   84 hlsl: shader_header '{' • CODEBODY

    CODEBODY  сдвиг, и переход в состояние 67


State 50

   16 function_declaration: TYPE_NAME IDENTIFIER '(' • arguments ')'

    FLOAT_TYPE   сдвиг, и переход в состояние 8
    FLOAT2_TYPE  сдвиг, и переход в состояние 9
    FLOAT3_TYPE  сдвиг, и переход в состояние 10
    FLOAT4_TYPE  сдвиг, и переход в состояние 11
    MAT2_TYPE    сдвиг, и переход в состояние 12
    MAT3_TYPE    сдвиг, и переход в состояние 13
    MAT4_TYPE    сдвиг, и переход в состояние 14
    BOOL_TYPE    сдвиг, и переход в состояние 15
    BOOL2_TYPE   сдвиг, и переход в состояние 16
    BOOL3_TYPE   сдвиг, и переход в состояние 17
    BOOL4_TYPE   сдвиг, и переход в состояние 18
    INT_TYPE     сдвиг, и переход в состояние 19
    INT2_TYPE    сдвиг, и переход в состояние 20
    INT3_TYPE    сдвиг, и переход в состояние 21
    INT4_TYPE    сдвиг, и переход в состояние 22

    arguments  переход в состояние 68
    base_type  переход в состояние 32
    var_decl   переход в состояние 69


State 51

   68 tech: TECHNIQUE IDENTIFIER $@5 • annotations '{' passes '}'

    '<'  сдвиг, и переход в состояние 47

    $default  вывод с использованием правила 80 (annotations)

    annotations  переход в состояние 70


State 52

   66 tech: TECHNIQUE $@4 '{' • passes '}'

    PASS  сдвиг, и переход в состояние 71

    pass    переход в состояние 72
    passes  переход в состояние 73


State 53

   18 register_declaration: ':' • REGISTER '(' INT ')'

    REGISTER  сдвиг, и переход в состояние 74


State 54

   20 cbuffer: CSTBUFFER IDENTIFIER register_declaration • '{' var_decls '}'

    '{'  сдвиг, и переход в состояние 75


State 55

   24 struct_body: '{' • var_decls '}'

    FLOAT_TYPE   сдвиг, и переход в состояние 8
    FLOAT2_TYPE  сдвиг, и переход в состояние 9
    FLOAT3_TYPE  сдвиг, и переход в состояние 10
    FLOAT4_TYPE  сдвиг, и переход в состояние 11
    MAT2_TYPE    сдвиг, и переход в состояние 12
    MAT3_TYPE    сдвиг, и переход в состояние 13
    MAT4_TYPE    сдвиг, и переход в состояние 14
    BOOL_TYPE    сдвиг, и переход в состояние 15
    BOOL2_TYPE   сдвиг, и переход в состояние 16
    BOOL3_TYPE   сдвиг, и переход в состояние 17
    BOOL4_TYPE   сдвиг, и переход в состояние 18
    INT_TYPE     сдвиг, и переход в состояние 19
    INT2_TYPE    сдвиг, и переход в состояние 20
    INT3_TYPE    сдвиг, и переход в состояние 21
    INT4_TYPE    сдвиг, и переход в состояние 22
    STRUCT       сдвиг, и переход в состояние 24

    struct     переход в состояние 76
    var_decls  переход в состояние 77
    base_type  переход в состояние 32
    var_decl   переход в состояние 78


State 56

   21 struct: STRUCT struct_header struct_body • struct_footer

    IDENTIFIER  сдвиг, и переход в состояние 79

    $default  вывод с использованием правила 26 (struct_footer)

    struct_footer  переход в состояние 80


State 57

   15 function_definition: function_declaration '{' $@1 • CODEBODY

    CODEBODY  сдвиг, и переход в состояние 81


State 58

   53 semantic: ':' • IDENTIFIER

    IDENTIFIER  сдвиг, и переход в состояние 82


State 59

   55 var_decl: base_type IDENTIFIER semantic •
   56         | base_type IDENTIFIER semantic • annotations '=' INT
   57         | base_type IDENTIFIER semantic • annotations '=' FLOAT

    '<'  сдвиг, и переход в состояние 47

    '='       вывод с использованием правила 80 (annotations)
    $default  вывод с использованием правила 55 (var_decl)

    annotations  переход в состояние 83


State 60

   72 scalar_type: STRING_TYPE •

    $default  вывод с использованием правила 72 (scalar_type)


State 61

   71 scalar_type: UNSIGNED •

    $default  вывод с использованием правила 71 (scalar_type)


State 62

   70 scalar_type: FLOAT_TYPE •

    $default  вывод с использованием правила 70 (scalar_type)


State 63

   69 scalar_type: INT_TYPE •

    $default  вывод с использованием правила 69 (scalar_type)


State 64

   79 annotation: scalar_type • IDENTIFIER '=' annotation_value ';'

    IDENTIFIER  сдвиг, и переход в состояние 84


State 65

   73 annotation_list: annotation_list • annotation
   81 annotations: '<' annotation_list • '>'

    STRING_TYPE  сдвиг, и переход в состояние 60
    UNSIGNED     сдвиг, и переход в состояние 61
    FLOAT_TYPE   сдвиг, и переход в состояние 62
    INT_TYPE     сдвиг, и переход в состояние 63
    '>'          сдвиг, и переход в состояние 85

    scalar_type  переход в состояние 64
    annotation   переход в состояние 86


State 66

   74 annotation_list: annotation •

    $default  вывод с использованием правила 74 (annotation_list)


State 67

   84 hlsl: shader_header '{' CODEBODY •

    $default  вывод с использованием правила 84 (hlsl)


State 68

   16 function_declaration: TYPE_NAME IDENTIFIER '(' arguments • ')'

    ')'  сдвиг, и переход в состояние 87


State 69

   12 arguments: var_decl •
   13          | var_decl • ',' arguments

    ','  сдвиг, и переход в состояние 88

    $default  вывод с использованием правила 12 (arguments)


State 70

   68 tech: TECHNIQUE IDENTIFIER $@5 annotations • '{' passes '}'

    '{'  сдвиг, и переход в состояние 89


State 71

   59 pass: PASS • $@2 annotations passstates
   61     | PASS • IDENTIFIER $@3 annotations passstates

    IDENTIFIER  сдвиг, и переход в состояние 90

    $default  вывод с использованием правила 58 ($@2)

    $@2  переход в состояние 91


State 72

   62 passes: pass •

    $default  вывод с использованием правила 62 (passes)


State 73

   63 passes: passes • pass
   64       | passes • error
   66 tech: TECHNIQUE $@4 '{' passes • '}'

    error  сдвиг, и переход в состояние 92
    PASS   сдвиг, и переход в состояние 71
    '}'    сдвиг, и переход в состояние 93

    pass  переход в состояние 94


State 74

   18 register_declaration: ':' REGISTER • '(' INT ')'

    '('  сдвиг, и переход в состояние 95


State 75

   20 cbuffer: CSTBUFFER IDENTIFIER register_declaration '{' • var_decls '}'

    FLOAT_TYPE   сдвиг, и переход в состояние 8
    FLOAT2_TYPE  сдвиг, и переход в состояние 9
    FLOAT3_TYPE  сдвиг, и переход в состояние 10
    FLOAT4_TYPE  сдвиг, и переход в состояние 11
    MAT2_TYPE    сдвиг, и переход в состояние 12
    MAT3_TYPE    сдвиг, и переход в состояние 13
    MAT4_TYPE    сдвиг, и переход в состояние 14
    BOOL_TYPE    сдвиг, и переход в состояние 15
    BOOL2_TYPE   сдвиг, и переход в состояние 16
    BOOL3_TYPE   сдвиг, и переход в состояние 17
    BOOL4_TYPE   сдвиг, и переход в состояние 18
    INT_TYPE     сдвиг, и переход в состояние 19
    INT2_TYPE    сдвиг, и переход в состояние 20
    INT3_TYPE    сдвиг, и переход в состояние 21
    INT4_TYPE    сдвиг, и переход в состояние 22
    STRUCT       сдвиг, и переход в состояние 24

    struct     переход в состояние 76
    var_decls  переход в состояние 96
    base_type  переход в состояние 32
    var_decl   переход в состояние 78


State 76

   29 var_decls: struct • ';'

    ';'  сдвиг, и переход в состояние 97


State 77

   24 struct_body: '{' var_decls • '}'
   27 var_decls: var_decls • var_decl ';'

    FLOAT_TYPE   сдвиг, и переход в состояние 8
    FLOAT2_TYPE  сдвиг, и переход в состояние 9
    FLOAT3_TYPE  сдвиг, и переход в состояние 10
    FLOAT4_TYPE  сдвиг, и переход в состояние 11
    MAT2_TYPE    сдвиг, и переход в состояние 12
    MAT3_TYPE    сдвиг, и переход в состояние 13
    MAT4_TYPE    сдвиг, и переход в состояние 14
    BOOL_TYPE    сдвиг, и переход в состояние 15
    BOOL2_TYPE   сдвиг, и переход в состояние 16
    BOOL3_TYPE   сдвиг, и переход в состояние 17
    BOOL4_TYPE   сдвиг, и переход в состояние 18
    INT_TYPE     сдвиг, и переход в состояние 19
    INT2_TYPE    сдвиг, и переход в состояние 20
    INT3_TYPE    сдвиг, и переход в состояние 21
    INT4_TYPE    сдвиг, и переход в состояние 22
    '}'          сдвиг, и переход в состояние 98

    base_type  переход в состояние 32
    var_decl   переход в состояние 99


State 78

   28 var_decls: var_decl • ';'

    ';'  сдвиг, и переход в состояние 100


State 79

   25 struct_footer: IDENTIFIER •

    $default  вывод с использованием правила 25 (struct_footer)


State 80

   21 struct: STRUCT struct_header struct_body struct_footer •

    $default  вывод с использованием правила 21 (struct)


State 81

   15 function_definition: function_declaration '{' $@1 CODEBODY •

    $default  вывод с использованием правила 15 (function_definition)


State 82

   53 semantic: ':' IDENTIFIER •

    $default  вывод с использованием правила 53 (semantic)


State 83

   56 var_decl: base_type IDENTIFIER semantic annotations • '=' INT
   57         | base_type IDENTIFIER semantic annotations • '=' FLOAT

    '='  сдвиг, и переход в состояние 101


State 84

   79 annotation: scalar_type IDENTIFIER • '=' annotation_value ';'

    '='  сдвиг, и переход в состояние 102


State 85

   81 annotations: '<' annotation_list '>' •

    $default  вывод с использованием правила 81 (annotations)


State 86

   73 annotation_list: annotation_list annotation •

    $default  вывод с использованием правила 73 (annotation_list)


State 87

   16 function_declaration: TYPE_NAME IDENTIFIER '(' arguments ')' •

    $default  вывод с использованием правила 16 (function_declaration)


State 88

   13 arguments: var_decl ',' • arguments

    FLOAT_TYPE   сдвиг, и переход в состояние 8
    FLOAT2_TYPE  сдвиг, и переход в состояние 9
    FLOAT3_TYPE  сдвиг, и переход в состояние 10
    FLOAT4_TYPE  сдвиг, и переход в состояние 11
    MAT2_TYPE    сдвиг, и переход в состояние 12
    MAT3_TYPE    сдвиг, и переход в состояние 13
    MAT4_TYPE    сдвиг, и переход в состояние 14
    BOOL_TYPE    сдвиг, и переход в состояние 15
    BOOL2_TYPE   сдвиг, и переход в состояние 16
    BOOL3_TYPE   сдвиг, и переход в состояние 17
    BOOL4_TYPE   сдвиг, и переход в состояние 18
    INT_TYPE     сдвиг, и переход в состояние 19
    INT2_TYPE    сдвиг, и переход в состояние 20
    INT3_TYPE    сдвиг, и переход в состояние 21
    INT4_TYPE    сдвиг, и переход в состояние 22

    arguments  переход в состояние 103
    base_type  переход в состояние 32
    var_decl   переход в состояние 69


State 89

   68 tech: TECHNIQUE IDENTIFIER $@5 annotations '{' • passes '}'

    PASS  сдвиг, и переход в состояние 71

    pass    переход в состояние 72
    passes  переход в состояние 104


State 90

   61 pass: PASS IDENTIFIER • $@3 annotations passstates

    $default  вывод с использованием правила 60 ($@3)

    $@3  переход в состояние 105


State 91

   59 pass: PASS $@2 • annotations passstates

    '<'  сдвиг, и переход в состояние 47

    $default  вывод с использованием правила 80 (annotations)

    annotations  переход в состояние 106


State 92

   64 passes: passes error •

    $default  вывод с использованием правила 64 (passes)


State 93

   66 tech: TECHNIQUE $@4 '{' passes '}' •

    $default  вывод с использованием правила 66 (tech)


State 94

   63 passes: passes pass •

    $default  вывод с использованием правила 63 (passes)


State 95

   18 register_declaration: ':' REGISTER '(' • INT ')'

    INT  сдвиг, и переход в состояние 107


State 96

   20 cbuffer: CSTBUFFER IDENTIFIER register_declaration '{' var_decls • '}'
   27 var_decls: var_decls • var_decl ';'

    FLOAT_TYPE   сдвиг, и переход в состояние 8
    FLOAT2_TYPE  сдвиг, и переход в состояние 9
    FLOAT3_TYPE  сдвиг, и переход в состояние 10
    FLOAT4_TYPE  сдвиг, и переход в состояние 11
    MAT2_TYPE    сдвиг, и переход в состояние 12
    MAT3_TYPE    сдвиг, и переход в состояние 13
    MAT4_TYPE    сдвиг, и переход в состояние 14
    BOOL_TYPE    сдвиг, и переход в состояние 15
    BOOL2_TYPE   сдвиг, и переход в состояние 16
    BOOL3_TYPE   сдвиг, и переход в состояние 17
    BOOL4_TYPE   сдвиг, и переход в состояние 18
    INT_TYPE     сдвиг, и переход в состояние 19
    INT2_TYPE    сдвиг, и переход в состояние 20
    INT3_TYPE    сдвиг, и переход в состояние 21
    INT4_TYPE    сдвиг, и переход в состояние 22
    '}'          сдвиг, и переход в состояние 108

    base_type  переход в состояние 32
    var_decl   переход в состояние 99


State 97

   29 var_decls: struct ';' •

    $default  вывод с использованием правила 29 (var_decls)


State 98

   24 struct_body: '{' var_decls '}' •

    $default  вывод с использованием правила 24 (struct_body)


State 99

   27 var_decls: var_decls var_decl • ';'

    ';'  сдвиг, и переход в состояние 109


State 100

   28 var_decls: var_decl ';' •

    $default  вывод с использованием правила 28 (var_decls)


State 101

   56 var_decl: base_type IDENTIFIER semantic annotations '=' • INT
   57         | base_type IDENTIFIER semantic annotations '=' • FLOAT

    FLOAT  сдвиг, и переход в состояние 110
    INT    сдвиг, и переход в состояние 111


State 102

   79 annotation: scalar_type IDENTIFIER '=' • annotation_value ';'

    FLOAT     сдвиг, и переход в состояние 112
    INT       сдвиг, и переход в состояние 113
    STR       сдвиг, и переход в состояние 114
    UNSIGNED  сдвиг, и переход в состояние 115

    annotation_value  переход в состояние 116


State 103

   13 arguments: var_decl ',' arguments •

    $default  вывод с использованием правила 13 (arguments)


State 104

   63 passes: passes • pass
   64       | passes • error
   68 tech: TECHNIQUE IDENTIFIER $@5 annotations '{' passes • '}'

    error  сдвиг, и переход в состояние 92
    PASS   сдвиг, и переход в состояние 71
    '}'    сдвиг, и переход в состояние 117

    pass  переход в состояние 94


State 105

   61 pass: PASS IDENTIFIER $@3 • annotations passstates

    '<'  сдвиг, и переход в состояние 47

    $default  вывод с использованием правила 80 (annotations)

    annotations  переход в состояние 118


State 106

   59 pass: PASS $@2 annotations • passstates

    '{'  сдвиг, и переход в состояние 119

    passstates  переход в состояние 120


State 107

   18 register_declaration: ':' REGISTER '(' INT • ')'

    ')'  сдвиг, и переход в состояние 121


State 108

   20 cbuffer: CSTBUFFER IDENTIFIER register_declaration '{' var_decls '}' •

    $default  вывод с использованием правила 20 (cbuffer)


State 109

   27 var_decls: var_decls var_decl ';' •

    $default  вывод с использованием правила 27 (var_decls)


State 110

   57 var_decl: base_type IDENTIFIER semantic annotations '=' FLOAT •

    $default  вывод с использованием правила 57 (var_decl)


State 111

   56 var_decl: base_type IDENTIFIER semantic annotations '=' INT •

    $default  вывод с использованием правила 56 (var_decl)


State 112

   75 annotation_value: FLOAT •

    $default  вывод с использованием правила 75 (annotation_value)


State 113

   76 annotation_value: INT •

    $default  вывод с использованием правила 76 (annotation_value)


State 114

   77 annotation_value: STR •

    $default  вывод с использованием правила 77 (annotation_value)


State 115

   78 annotation_value: UNSIGNED •

    $default  вывод с использованием правила 78 (annotation_value)


State 116

   79 annotation: scalar_type IDENTIFIER '=' annotation_value • ';'

    ';'  сдвиг, и переход в состояние 122


State 117

   68 tech: TECHNIQUE IDENTIFIER $@5 annotations '{' passes '}' •

    $default  вывод с использованием правила 68 (tech)


State 118

   61 pass: PASS IDENTIFIER $@3 annotations • passstates

    '{'  сдвиг, и переход в состояние 119

    passstates  переход в состояние 123


State 119

   37 passstates: '{' • shader_assignments '}'

    VERTEXPROGRAM    сдвиг, и переход в состояние 124
    FRAGMENTPROGRAM  сдвиг, и переход в состояние 125
    GEOMETRYPROGRAM  сдвиг, и переход в состояние 126

    shader_type         переход в состояние 127
    shader_assignment   переход в состояние 128
    shader_assignments  переход в состояние 129


State 120

   59 pass: PASS $@2 annotations passstates •

    $default  вывод с использованием правила 59 (pass)


State 121

   18 register_declaration: ':' REGISTER '(' INT ')' •

    $default  вывод с использованием правила 18 (register_declaration)


State 122

   79 annotation: scalar_type IDENTIFIER '=' annotation_value ';' •

    $default  вывод с использованием правила 79 (annotation)


State 123

   61 pass: PASS IDENTIFIER $@3 annotations passstates •

    $default  вывод с использованием правила 61 (pass)


State 124

   31 shader_type: VERTEXPROGRAM •

    $default  вывод с использованием правила 31 (shader_type)


State 125

   33 shader_type: FRAGMENTPROGRAM •

    $default  вывод с использованием правила 33 (shader_type)


State 126

   32 shader_type: GEOMETRYPROGRAM •

    $default  вывод с использованием правила 32 (shader_type)


State 127

   34 shader_assignment: shader_type • '=' IDENTIFIER

    '='  сдвиг, и переход в состояние 130


State 128

   35 shader_assignments: shader_assignment •

    $default  вывод с использованием правила 35 (shader_assignments)


State 129

   36 shader_assignments: shader_assignments • shader_assignment
   37 passstates: '{' shader_assignments • '}'

    VERTEXPROGRAM    сдвиг, и переход в состояние 124
    FRAGMENTPROGRAM  сдвиг, и переход в состояние 125
    GEOMETRYPROGRAM  сдвиг, и переход в состояние 126
    '}'              сдвиг, и переход в состояние 131

    shader_type        переход в состояние 127
    shader_assignment  переход в состояние 132


State 130

   34 shader_assignment: shader_type '=' • IDENTIFIER

    IDENTIFIER  сдвиг, и переход в состояние 133


State 131

   37 passstates: '{' shader_assignments '}' •

    $default  вывод с использованием правила 37 (passstates)


State 132

   36 shader_assignments: shader_assignments shader_assignment •

    $default  вывод с использованием правила 36 (shader_assignments)


State 133

   34 shader_assignment: shader_type '=' IDENTIFIER •

    $default  вывод с использованием правила 34 (shader_assignment)
