#line 1 "Scanner.cpp"

#line 3 "Scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int Scanner::yylex()

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 210
#define YY_END_OF_BUFFER 211
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1786] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  211,  209,  195,  194,  200,  201,  198,  197,
      206,  196,  199,  207,  203,  202,  208,  208,  208,  208,
      204,  205,  210,  195,  189,  188,  193,  192,  190,  191,
      195,  194,  207,  208,  208,  208,  208,  189,  193,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  186,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  187,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
       15,  208,   16,  208,   14,  208,  208,  128,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,   76,  208,  208,   75,
      208,  208,  208,  208,  208,  208,  100,   99,  208,  208,
      208,  208,  208,  208,  208,  208,  112,  111,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,   11,  208,
       10,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  125,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,   72,  208,   71,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,   22,  208,   23,  208,   21,  208,  208,  208,  208,
        1,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      127,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,   77,  208,  208,  208,  208,
      208,  208,  208,  101,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  113,  208,  208,  208,  208,  208,  208,
      208,  208,  208,   18,  208,   17,  208,   13,   12,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,   36,  208,   37,  208,
       35,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,   83,  208,  208,   82,  208,  208,   74,   73,  208,
      208,  208,  208,  103,  102,  208,  208,  208,  208,  208,
      208,  208,  208,  115,  114,  208,  208,  208,  208,  208,

      208,  208,   29,  208,   30,  208,   28,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,   32,  208,   31,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

       79,  208,   78,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,   25,  208,   24,  208,   20,
       19,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,   50,  208,   51,  208,
       49,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,   84,  208,  208,  208,  208,  208,  208,  104,  208,
      208,  208,  208,  208,  208,  208,  208,  116,   43,  208,
       44,  208,   42,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

       46,  208,   45,  208,   34,   33,  208,  208,  208,  208,
      137,  208,  139,  208,  208,  208,  208,  208,  208,  208,
      147,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,   90,  208,  208,
       89,  208,  208,   81,   80,  208,  208,  208,  106,  105,
      208,  208,  208,  208,  208,  208,  208,  118,  117,   39,
      208,   38,  208,   27,   26,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  136,  138,  141,  140,  143,  142,
      208,  208,  146,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,   86,  208,   85,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,   48,   47,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,   91,  208,  208,  208,  208,
      208,  107,  208,    2,  208,  208,  208,  208,  208,  119,
       41,   40,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  145,
      144,  129,  130,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,   97,  208,  208,   96,
      208,  208,   88,   87,  208,  109,  108,  208,  208,  208,
      208,  121,  120,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  133,  208,
      131,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,   93,  208,   92,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  159,  208,  161,  208,  163,
      208,  165,  208,  167,  208,  169,  208,  171,  208,  173,
      208,  208,  208,  208,    6,  135,  208,  132,  208,  208,

      208,  155,  154,  208,  208,  208,  208,  208,  208,   98,
      208,  208,  110,  208,  208,    5,  122,  126,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,   57,  208,   58,  208,   56,  208,  208,  208,  208,
      175,  208,  177,  208,  179,  208,  208,  208,  208,  208,
      158,  160,  162,  164,  166,  168,  170,  172,  208,  208,
      208,  134,  208,  208,  208,  208,  208,  208,  208,  208,
      208,   95,   94,  208,  208,    9,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,   53,  208,
       52,  208,  181,  208,  174,  176,  178,  183,  208,  185,

      208,  208,    4,    8,  208,  208,  208,  208,  208,  208,
      208,  208,  208,    3,    7,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  180,
      182,  184,  208,  124,  157,  156,  208,  208,  208,  208,
      149,  208,   70,  208,  208,   69,  208,  208,   64,  208,
      208,   63,  208,  208,   55,   54,  123,  208,  208,  208,
      208,  148,   66,  208,   65,  208,   60,  208,   59,  208,
      151,  208,  153,  208,  208,  208,  208,  208,  150,  152,
       68,   67,   62,   61,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    1,    1,    1,    1,    1,    1,    4,
        5,    6,    7,    8,    9,    1,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,    1,   21,    1,
       22,    1,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       32,   39,   40,   41,   42,   43,   32,   44,   32,   32,
        1,    1,    1,   45,   46,    1,   47,   32,   32,   48,

       49,   32,   32,   50,   32,   32,   32,   32,   51,   32,
       52,   32,   32,   53,   32,   54,   32,   32,   32,   55,
       32,   32,   56,    1,   57,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[58] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    2,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    2,    2
    } ;

static const flex_int16_t yy_base[1792] =
    {   0,
        0,    0,   56,   58,   60,   62,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   65,    0,
      120,  122,  124,  126,  128,  130,  132,  134,  136,  138,
      140,  142,  144,  146,  148,  150,  152,  154,  156,  158,
      160,  166, 1900, 1901, 1897, 1895, 1901, 1901, 1901, 1901,
     1901, 1901, 1901,    0, 1901, 1901,    0, 1860, 1862, 1846,
     1901, 1901, 1901, 1892,    0, 1901,    0, 1901, 1901, 1901,
     1891, 1889,    0,    0, 1852, 1850, 1836,    0,    0, 1853,
     1853, 1832, 1862, 1844, 1834, 1841, 1831, 1825, 1833, 1831,
     1849,  147, 1828, 1823,  169,  178,  171,  176,  196, 1855,

     1837, 1853, 1822, 1817, 1830,  156, 1844, 1826, 1855, 1836,
     1835, 1834,  206, 1845, 1846, 1847, 1835, 1833, 1832, 1839,
     1842, 1825, 1824, 1837,  185, 1805, 1824, 1803, 1795, 1796,
     1830, 1833, 1832, 1824, 1817, 1812, 1825,  184, 1820, 1792,
     1791, 1790, 1789, 1788, 1803, 1786, 1785, 1784, 1783, 1808,
     1781, 1813,  187,  196, 1810,  188,  197, 1805,  124, 1781,
     1795, 1795,    0, 1773, 1790, 1807, 1806, 1787, 1769, 1802,
     1774, 1773, 1772, 1771, 1770,  156,  187,  188,  192, 1762,
      195, 1765, 1764, 1765, 1775, 1764, 1756, 1789,  196, 1786,
      199,  216, 1775, 1774, 1780,  204,  221,  216,  217, 1765,

     1767, 1781, 1739, 1776, 1762, 1761, 1770,  249, 1776, 1772,
     1770, 1769, 1765, 1754, 1743, 1745, 1741, 1743, 1742, 1741,
     1740, 1739,  209, 1735, 1737, 1736, 1735, 1742, 1749, 1756,
     1728, 1749,  241,  223, 1752,  144, 1733, 1748, 1720, 1745,
     1744, 1744,  242, 1727, 1738,  218, 1720, 1718, 1725, 1728,
     1716, 1714, 1725, 1713, 1717, 1732,    0, 1722, 1733, 1732,
     1704,  263, 1687, 1686, 1685, 1684, 1699, 1714, 1713, 1689,
      248, 1710, 1704, 1695, 1702, 1693, 1692, 1691, 1690, 1689,
     1697, 1696, 1694, 1685, 1684, 1683, 1685, 1679, 1705, 1697,
      251, 1681, 1678, 1676, 1687, 1675, 1673, 1684,  254, 1674,

     1671, 1670, 1682, 1668, 1680, 1656,  255, 1667, 1664, 1663,
      257,  251,  252, 1657, 1658, 1672, 1672, 1653, 1654, 1669,
     1650, 1654, 1643, 1672, 1676, 1675, 1666, 1629, 1628, 1667,
      191,  268,  279, 1669, 1665, 1667, 1636, 1658,  262,  263,
     1652, 1636, 1650, 1634, 1633, 1632, 1631, 1630, 1634, 1633,
     1642, 1626, 1625, 1624, 1625, 1641,  260, 1631, 1647,  265,
     1621, 1616, 1617, 1632, 1613, 1614, 1629, 1637,  268, 1613,
     1608, 1607, 1632, 1609, 1633, 1602, 1626,  271, 1605, 1600,
     1599, 1620,  272, 1602, 1600, 1607, 1610, 1598, 1596, 1607,
        0, 1596,    0, 1596,    0, 1594, 1594,    0, 1600, 1584,

     1579, 1585, 1599, 1576,  303, 1609, 1574, 1573, 1572, 1571,
     1570, 1569, 1568, 1567, 1600, 1565, 1564, 1573, 1562,  285,
      287, 1561,  286, 1560, 1570, 1558, 1568, 1567, 1566, 1565,
     1564, 1561, 1560, 1550, 1560, 1559, 1558, 1569, 1545, 1578,
      289, 1570, 1571,  302,  301, 1564,    0, 1551, 1551,    0,
     1549, 1549, 1569,  308, 1550, 1557,    0,    0, 1533, 1539,
     1531, 1540, 1560,  312, 1543, 1550,    0,    0, 1526,  313,
      314, 1530, 1531, 1545, 1545, 1526, 1527, 1542,    0, 1537,
        0, 1536, 1536, 1525, 1518, 1547, 1546,  306, 1546, 1510,
     1509, 1508,  344,  316,  319,  320,  323,  324,  327,  328,

      331, 1507, 1510, 1509, 1513,  332, 1513, 1511, 1518, 1521,
     1509, 1507, 1518,  335, 1503, 1505, 1516, 1493, 1514, 1491,
     1490, 1489, 1488, 1487, 1509, 1508, 1506, 1483, 1482, 1481,
     1485, 1483, 1512, 1487, 1486, 1497,  353, 1486, 1483, 1481,
     1492, 1480, 1478, 1489, 1472,    0, 1485,    0, 1484,  355,
     1476, 1473, 1472, 1466, 1464, 1470, 1462, 1466,  356, 1468,
     1465, 1464, 1458,  340, 1462, 1460, 1467, 1470, 1458, 1456,
     1467,    0, 1456,    0, 1456,    0, 1454, 1454, 1461, 1460,
        0, 1448, 1448, 1472, 1471,  350,  352, 1435,  345,  351,
      354, 1434, 1433, 1439, 1441, 1437, 1439, 1435, 1437, 1433,

     1435, 1431, 1433, 1429, 1431, 1427, 1429, 1425, 1427, 1420,
     1425, 1424, 1420,  364,  374, 1417, 1418, 1432, 1432, 1413,
     1414, 1429, 1412, 1414, 1420, 1411, 1413, 1422, 1411, 1420,
     1419, 1418, 1417, 1416, 1398, 1397, 1403, 1412, 1395, 1394,
     1387, 1404, 1385, 1393, 1392, 1409, 1415,  366, 1389, 1384,
     1385, 1400, 1381, 1382, 1397,    0, 1393, 1392, 1403,  367,
     1379, 1374, 1373,    0, 1377, 1366, 1375, 1371, 1392,  371,
     1371, 1366, 1365,    0,  381,  387, 1364, 1365, 1379, 1377,
       83,  163,  227,    0,  266,    0,  272,    0,    0,  278,
      297,  289,  301,  315,  347,  368,  373,  379,  379,  394,

      382,  386,  390,  389,  393,  391,  395,  392,  393,  407,
      400,  409,  402,  411,  404,  413,  406,  415,  408,  417,
      410,  419,  412,  421,  414,  424,  416,  417,  420,  420,
      420,  429,  434,  424,  424,  437,    0,  428,    0,  430,
        0,  430,  432,  438,  431,  445,  431,  434,  438,  436,
      440,  441,  442,  443,  444,  433,  434,  444,  448,  464,
      465,  445,  452,  447,  449,  451,  468,  475,  465,  463,
      472,    0,  462,  464,    0,  465,  468,    0,    0,  491,
      478,  476,  485,    0,    0,  473,  473,  475,  478,  500,
      488,  486,  495,    0,    0,  484,  484,  493,  498,  488,

      488,  501,    0,  492,    0,  494,    0,  494,  496,  505,
      506,  498,  495,  495,  496,  498,  501,  517,  519,  502,
      505,  522,  507,  511,  519,  512,  521,  514,  523,  516,
      515,  519,  517,  521,  534,  520,  536,  522,  538,  524,
      540,  526,  542,  528,  544,  530,  546,  532,  548,  534,
      540,  536,  537,  531,  537,  540,  556,  558,  541,  544,
      561,    0,  558,    0,  559,  563,  549,  543,  555,  566,
      555,  568,  557,  558,  559,  560,  561,  575,  576,  576,
      565,  557,  558,  586,  569,  571,  572,  574,  575,  599,
      572,  567,  581,  580,  580,  594,  584,  584,  597,  582,

        0,  597,    0,  598,  580,  593,  592,  593,  589,  592,
      609,  594,  588,  589,  602,  601,  602,  598,  599,  602,
      618,  620,  603,  606,  623,    0,  620,    0,  621,    0,
        0,  603,  615,  620,  621,  622,  623,  609,  629,  619,
      632,  621,  633,  635,  641,  634,  648,  634,  650,  636,
      652,  638,  649,  642,  651,  644,  636,  648,  638,  650,
      640,  652,  642,  654,  644,  656,  646,  658,  648,  660,
      650,  662,  661,  664,  665,  663,    0,  667,    0,  669,
        0,  669,  671,  680,  681,  662,  674,  686,  665,  679,
      688,  681,  690,  691,  692,  693,  694,  686,  687,  689,

      698,  682,  683,  680,  704,  691,  692,  684,  685,  686,
      687,  695,  699,  696,  700,  698,  701,  718,  701,  704,
      721,    0,  719,  720,  707,  711,  709,  710,    0,  717,
      728,  719,  717,  716,  720,  718,  719,    0,    0,  726,
        0,  728,    0,  728,  730,  739,  740,  729,  722,  733,
      733,  746,  736,  736,  749,  739,  739,  752,  742,  742,
      755,  743,  736,  745,  757,  747,  740,  760,  764,  750,
      744,  756,  746,  758,  748,  760,  772,  758,  774,  760,
      776,  755,  778,  757,  780,  759,  782,  761,  784,  763,
      786,  765,  788,  767,  790,  769,  793,  771,  772,  796,

        0,  793,    0,  794,    0,    0,  798,  777,  790,  801,
        0,  793,    0,  794,  795,  796,  797,  798,  795,  796,
        0,  801,  804,  805,  795,  797,  800,  801,  817,  818,
      803,  804,  818,  811,  821,  819,  828,    0,  818,  820,
        0,  821,  824,    0,    0,  832,  831,  841,    0,    0,
      819,  833,  821,  845,  841,  839,  848,    0,    0,    0,
      846,    0,  847,    0,    0,  852,  838,  836,  839,  856,
      839,  842,  859,  842,  845,  862,  845,  848,  865,  866,
      852,  868,  866,  870,  856,  869,  850,  862,  874,  853,
      876,  855,  878,  857,  858,  870,  860,  872,  874,  885,

      876,  887,  878,  889,  880,  891,  882,  893,  884,  895,
      886,  897,  888,  899,  883,  887,  888,  902,  902,  903,
      896,  907,  895,  899,    0,    0,    0,    0,    0,    0,
      909,  910,    0,  900,  901,  907,  893,  905,  906,  908,
      909,  905,  909,  907,  911,  924,  910,  916,  915,  915,
      928,  918,  918,  931,  916,    0,  931,    0,  932,  926,
      925,  926,  922,  926,  946,  928,  942,  934,  933,  934,
      930,  946,  947,  949,  952,  930,  942,  944,  933,  945,
      947,  936,  948,  950,  939,  951,  953,  963,  966,  965,
      945,  967,  970,  948,  971,  950,  963,  974,  965,  976,

      967,  978,  979,  958,  981,  960,  970,  974,  972,  976,
      974,  978,  976,  980,  978,  982,  980,  984,  982,  986,
      984,  988,  977, 1001, 1002,  993,    0,    0,  990,  994,
     1004,  993,  998,  999,  992,  993,  999,  998,  991,  992,
     1002, 1003, 1012, 1005, 1014, 1007,  999, 1011, 1010, 1007,
     1010, 1027, 1010, 1013, 1030,    0, 1028, 1029, 1019, 1016,
     1017,    0, 1036,    0, 1037, 1028, 1025, 1022, 1023,    0,
        0,    0, 1032, 1041, 1029, 1022, 1042, 1032, 1025, 1045,
     1035, 1028, 1048, 1038, 1031, 1051, 1046, 1055, 1048, 1044,
     1050, 1059, 1047, 1052, 1063, 1051, 1055, 1053, 1057, 1055,

     1059, 1060, 1071, 1062, 1073, 1073, 1062, 1075, 1064, 1077,
     1066, 1079, 1068, 1081, 1070, 1083, 1072, 1085, 1074, 1087,
     1076, 1076, 1090, 1091, 1105, 1093, 1082, 1087, 1096,    0,
        0,    0,    0, 1081, 1100, 1100, 1101, 1101, 1102, 1104,
     1090, 1106, 1092, 1108, 1087, 1111,    0, 1100, 1102,    0,
     1102, 1104,    0,    0, 1116,    0,    0, 1115, 1116, 1130,
     1120,    0,    0, 1130, 1112, 1123, 1109, 1122, 1126, 1112,
     1125, 1129, 1115, 1128, 1132, 1118, 1131, 1144, 1126, 1146,
     1138, 1148, 1130, 1141, 1128, 1132, 1142, 1131, 1144, 1133,
     1146, 1135, 1136, 1140, 1138, 1142, 1144, 1153, 1146, 1155,

     1148, 1157, 1150, 1159, 1152, 1161, 1154, 1163, 1156, 1165,
     1158, 1167, 1170, 1161, 1162, 1179, 1164, 1173,    0, 1166,
        0, 1175, 1167, 1168, 1170, 1171, 1159, 1171, 1161, 1173,
     1175, 1186, 1170,    0, 1185,    0, 1186, 1173, 1182, 1183,
     1200, 1177, 1206, 1208, 1196, 1199, 1177, 1199, 1202, 1180,
     1202, 1205, 1183, 1205, 1208, 1186, 1220, 1220, 1222, 1211,
     1224, 1224, 1214, 1215, 1204, 1209, 1218, 1211, 1220, 1213,
     1222, 1223, 1212, 1225, 1214,    0, 1219,    0, 1220,    0,
     1221,    0, 1222,    0, 1223,    0, 1224,    0, 1225,    0,
     1226, 1235, 1249, 1250,    0,    0, 1230,    0, 1231, 1228,

     1229,    0,    0, 1243, 1222, 1245, 1224, 1234, 1238,    0,
     1247, 1248,    0, 1263, 1264,    0,    0,    0, 1260, 1245,
     1254, 1242, 1248, 1257, 1245, 1251, 1260, 1248, 1254, 1263,
     1251,    0, 1277,    0, 1258,    0, 1279, 1260, 1261, 1270,
        0, 1263,    0, 1264,    0, 1265, 1266, 1275, 1268, 1277,
        0,    0,    0,    0,    0,    0,    0,    0, 1270, 1287,
     1288,    0, 1292, 1282, 1283, 1275, 1286, 1277, 1288, 1288,
     1277,    0,    0, 1298, 1299,    0, 1303, 1285, 1296, 1306,
     1288, 1299, 1309, 1291, 1302, 1312, 1294, 1305,    0, 1315,
        0, 1316,    0, 1298,    0,    0,    0,    0, 1299,    0,

     1300, 1320,    0,    0, 1322, 1303, 1304, 1301, 1305, 1303,
     1307, 1309, 1318,    0,    0, 1331, 1331, 1321, 1334, 1334,
     1324, 1337, 1337, 1327, 1340, 1340, 1330, 1343, 1344,    0,
        0,    0, 1345,    0,    0,    0, 1334, 1323, 1336, 1325,
        0, 1330,    0, 1351, 1332,    0, 1353, 1334,    0, 1355,
     1336,    0, 1357, 1338,    0,    0,    0, 1339, 1348, 1341,
     1350,    0,    0, 1362,    0, 1363,    0, 1364,    0, 1365,
        0, 1347,    0, 1348, 1369, 1370, 1371, 1372,    0,    0,
        0,    0,    0,    0, 1901, 1385, 1389, 1391, 1392, 1394,
     1398

    } ;

static const flex_int16_t yy_def[1792] =
    {   0,
     1785,    1, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786,
     1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1785,   19,
     1787, 1787, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786,
     1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786, 1786,
     1786, 1786, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1788, 1785, 1785, 1789, 1789, 1789, 1789,
     1785, 1785, 1785, 1785, 1790, 1785, 1791, 1785, 1785, 1785,
     1785, 1785, 1788, 1789, 1789, 1789, 1789, 1790, 1791, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,

     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789, 1789,
     1789, 1789, 1789, 1789,    0, 1785, 1785, 1785, 1785, 1785,
     1785

    } ;

static const flex_int16_t yy_nxt[1959] =
    {   0,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       55,   56,   57,   57,   57,   57,   57,   58,   59,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   60,   57,   44,   44,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   61,   62,   64,   46,   64,
       46,   64,   46,   64,   46,   63,   64,   46,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   63,
       63,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       66,   63,   68,  807,   68,   64,   46,   64,   46,   64,
       46,   64,   46,   64,   46,   64,   46,   64,   46,   64,
       46,   64,   46,   64,   46,   64,   46,   64,   46,   64,
       46,   64,   46,   64,   46,   64,   46,   64,   46,   64,
       46,   64,   46,  198,   63,  199,   63,   64,   46,   95,
       96,  300,   97,   98,  301,   69,   70,   69,   70,  132,
      105,  106,  114,  115,  116,   99,  100,  107,  101,  109,
      102,  117,  110,  111,  133,  215,  112,  216,  118,  172,

      173,  808,  113,  193,  194,  408,  409,  120,  108,  121,
      122,  123,  124,  158,  125,  188,  119,  140,  141,  142,
      143,  144,  145,  146,  190,  195,  217,  219,  218,  220,
      159,  221,  189,  222,  224,  233,  225,  234,  236,  238,
      237,  191,  196,  243,  245,  244,  247,  251,  281,  809,
      282,  248,  252,  296,  249,  250,  253,  312,  297,  313,
      262,  239,  298,  263,  264,  265,  246,  266,  292,  308,
      338,  293,  309,  328,  359,  329,  294,  368,  377,  382,
      295,  384,  388,  410,  411,  422,  385,  389,  440,  386,
      387,  390,  810,  339,  412,  413,  360,  414,  811,  369,

      378,  420,  383,  421,  444,  441,  445,  454,  423,  455,
      464,  470,  465,  471,  489,  507,  812,  511,  490,  491,
      508,  492,  512,  509,  510,  515,  513,  516,  534,  538,
      535,  542,  539,  813,  814,  551,  543,  540,  552,  560,
      544,  541,  561,  565,  569,  586,  815,  587,  566,  570,
      816,  567,  568,  571,  592,  594,  593,  595,  596,  598,
      597,  599,  600,  602,  601,  603,  604,  606,  605,  607,
      608,  614,  609,  615,  623,  647,  624,  659,  669,  675,
      694,  676,  698,  817,  702,  695,  703,  699,  696,  697,
      704,  700,  705,  706,  730,  707,  818,  819,  648,  731,

      660,  670,  732,  733,  734,  769,  781,  770,  782,  735,
      791,  796,  792,  736,  820,  821,  797,  800,  822,  798,
      799,  823,  801,  824,  825,  826,  802,  827,  828,  829,
      830,  831,  833,  832,  834,  835,  836,  837,  838,  839,
      840,  841,  842,  843,  844,  845,  846,  847,  848,  849,
      850,  851,  852,  853,  854,  855,  856,  857,  858,  859,
      860,  861,  862,  863,  864,  865,  866,  867,  868,  869,
      870,  871,  872,  873,  874,  875,  876,  877,  878,  879,
      880,  881,  882,  883,  884,  885,  886,  888,  887,  889,
      890,  892,  893,  897,  900,  894,  901,  902,  898,  903,

      895,  904,  899,  905,  896,  906,  908,  909,  907,  910,
      911,  912,  913,  891,  914,  915,  917,  918,  916,  919,
      920,  921,  922,  923,  924,  925,  926,  927,  928,  929,
      930,  931,  932,  933,  934,  936,  935,  937,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  947,  948,  949,
      950,  951,  952,  953,  954,  955,  956,  957,  958,  959,
      960,  961,  962,  963,  964,  965,  966,  967,  968,  969,
      970,  971,  972,  973,  974,  975,  976,  977,  978,  979,
      980,  981,  982,  983,  984,  985,  986,  987,  988,  989,
      990,  991,  992,  993,  994,  995,  996,  997,  998,  999,

     1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
     1010, 1012, 1014, 1013, 1015, 1016, 1017, 1011, 1018, 1019,
     1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
     1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
     1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
     1050, 1053, 1056, 1059, 1062, 1051, 1054, 1057, 1060, 1052,
     1055, 1058, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
     1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
     1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
     1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,

     1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,
     1130, 1131, 1132, 1133, 1134, 1135, 1137, 1136, 1138, 1139,
     1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1147, 1149,
     1150, 1151, 1152, 1153, 1154, 1155, 1157, 1156, 1158, 1159,
     1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
     1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
     1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,

     1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
     1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
     1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,
     1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
     1240, 1241, 1242, 1244, 1243, 1245, 1246, 1247, 1248, 1252,
     1255, 1249, 1256, 1257, 1253, 1258, 1250, 1259, 1254, 1260,
     1251, 1262, 1261, 1263, 1264, 1265, 1266, 1267, 1268, 1270,
     1271, 1269, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
     1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
     1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299,

     1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309,
     1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319,
     1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329,
     1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339,
     1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
     1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
     1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,
     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
     1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
     1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,

     1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
     1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419,
     1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439,
     1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
     1450, 1451, 1452, 1453, 1454, 1455, 1456, 1457, 1458, 1459,
     1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467, 1468, 1469,
     1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479,
     1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489,
     1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499,

     1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,
     1510, 1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519,
     1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
     1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
     1540, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548, 1549,
     1550, 1551, 1552, 1553, 1554, 1555, 1556, 1557, 1558, 1559,
     1560, 1561, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1569,
     1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578, 1579,
     1580, 1581, 1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589,
     1590, 1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599,

     1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,
     1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
     1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629,
     1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639,
     1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649,
     1650, 1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659,
     1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669,
     1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679,
     1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689,
     1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699,

     1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709,
     1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719,
     1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729,
     1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739,
     1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749,
     1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759,
     1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769,
     1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779,
     1780, 1781, 1782, 1783, 1784,   63,   63,   63,   63,   67,
       67,   67,   67,   73,   74,   74,   78,   78,   79,  806,

       79,   79,  805,  804,  803,  795,  794,  793,  790,  789,
      788,  787,  786,  785,  784,  783,  780,  779,  778,  777,
      776,  775,  774,  773,  772,  771,  768,  767,  766,  765,
      764,  763,  762,  761,  760,  759,  758,  757,  756,  755,
      754,  753,  752,  751,  750,  749,  748,  747,  746,  745,
      744,  743,  742,  741,  740,  739,  738,  737,  729,  728,
      727,  726,  725,  724,  723,  722,  721,  720,  719,  718,
      717,  716,  715,  714,  713,  712,  711,  710,  709,  708,
      701,  693,  692,  691,  690,  689,  688,  687,  686,  685,
      684,  683,  682,  681,  680,  679,  678,  677,  674,  673,

      672,  671,  668,  667,  666,  665,  664,  663,  662,  661,
      658,  657,  656,  655,  654,  653,  652,  651,  650,  649,
      646,  645,  644,  643,  642,  641,  640,  639,  638,  637,
      636,  635,  634,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  622,  621,  620,  619,  618,  617,  616,  613,
      612,  611,  610,  591,  590,  589,  588,  585,  584,  583,
      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  564,  563,  562,  559,  558,  557,  556,  555,  554,
      553,  550,  549,  548,  547,  546,  545,  537,  536,  533,
      532,  531,  530,  529,  528,  527,  526,  525,  524,  523,

      522,  521,  520,  519,  518,  517,  514,  506,  505,  504,
      503,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  488,  487,  486,  485,  484,  483,  482,  481,  480,
      479,  478,  477,  476,  475,  474,  473,  472,  469,  468,
      467,  466,  463,  462,  461,  460,  459,  458,  457,  456,
      453,  452,  451,  450,  449,  448,  447,  446,  443,  442,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      429,  428,  427,  426,  425,  424,  419,  418,  417,  416,
      415,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  392,  391,  381,  380,

      379,  376,  375,  374,  373,  372,  371,  370,  367,  366,
      365,  364,  363,  362,  361,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  340,  337,  336,  335,  334,  333,  332,
      331,  330,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  311,  310,  307,  306,
      305,  304,  303,  302,  299,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  280,  279,  278,  277,  276,  275,
      274,  273,  272,  271,  270,  269,  268,  267,  261,  260,
      259,  258,  257,  256,  255,  254,  242,  241,  240,  235,

      232,  231,  230,  229,  228,  227,  226,  223,  214,  213,
      212,  211,  210,  209,  208,  207,  206,  205,  204,  203,
      202,  201,  200,  197,  192,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  171,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  157,  156,  155,  154,  153,  152,  151,  150,  149,
      148,  147,  139,  138,  137,  136,  135,  134,  131,  130,
      129,  128,  127,  126,  104,  103,   94,   93,   92,   91,
       90,   89,   88,   87,   86,   85,   84,   83,   82,   81,
       80,   72,   71,   71,   77,   76,   75,   72,   71, 1785,

       43, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785
    } ;

static const flex_int16_t yy_chk[1959] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,    5,    5,    6,    6,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   21,  681,   22,   23,   23,   24,   24,   25,
       25,   26,   26,   27,   27,   28,   28,   29,   29,   30,
       30,   31,   31,   32,   32,   33,   33,   34,   34,   35,
       35,   36,   36,   37,   37,   38,   38,   39,   39,   40,
       40,   41,   41,  159,   21,  159,   22,   42,   42,   92,
       92,  236,   92,   92,  236,   21,   21,   22,   22,  106,
       95,   95,   97,   97,   97,   92,   92,   95,   92,   96,
       92,   98,   96,   96,  106,  176,   96,  176,   98,  138,

      138,  682,   96,  156,  156,  331,  331,   99,   95,   99,
       99,   99,   99,  125,   99,  153,   98,  113,  113,  113,
      113,  113,  113,  113,  154,  157,  177,  178,  177,  178,
      125,  179,  153,  179,  181,  189,  181,  189,  191,  192,
      191,  154,  157,  196,  197,  196,  198,  199,  223,  683,
      223,  198,  199,  234,  198,  198,  199,  246,  234,  246,
      208,  192,  234,  208,  208,  208,  197,  208,  233,  243,
      271,  233,  243,  262,  291,  262,  233,  299,  307,  311,
      233,  312,  313,  332,  332,  340,  312,  313,  357,  312,
      312,  313,  685,  271,  333,  333,  291,  333,  687,  299,

      307,  339,  311,  339,  360,  357,  360,  369,  340,  369,
      378,  383,  378,  383,  405,  420,  690,  421,  405,  405,
      420,  405,  421,  420,  420,  423,  421,  423,  441,  444,
      441,  445,  444,  691,  692,  454,  445,  444,  454,  464,
      445,  444,  464,  470,  471,  488,  693,  488,  470,  471,
      694,  470,  470,  471,  493,  494,  493,  494,  495,  496,
      495,  496,  497,  498,  497,  498,  499,  500,  499,  500,
      501,  506,  501,  506,  514,  537,  514,  550,  559,  564,
      586,  564,  587,  695,  589,  586,  589,  587,  586,  586,
      590,  587,  590,  591,  614,  591,  696,  697,  537,  614,

      550,  559,  614,  614,  615,  648,  660,  648,  660,  615,
      670,  675,  670,  615,  698,  699,  675,  676,  700,  675,
      675,  701,  676,  701,  702,  703,  676,  704,  705,  706,
      707,  708,  709,  708,  709,  710,  711,  712,  713,  714,
      715,  716,  717,  718,  719,  720,  721,  722,  723,  724,
      725,  726,  727,  728,  729,  730,  731,  732,  733,  734,
      735,  736,  738,  740,  742,  743,  744,  745,  746,  747,
      748,  749,  750,  751,  752,  753,  754,  755,  756,  757,
      758,  759,  760,  761,  762,  763,  764,  765,  764,  766,
      767,  768,  769,  770,  771,  769,  773,  774,  770,  776,

      769,  777,  770,  780,  769,  781,  782,  783,  781,  786,
      787,  788,  789,  767,  790,  791,  792,  793,  791,  796,
      797,  798,  799,  800,  801,  802,  804,  806,  808,  809,
      810,  811,  812,  813,  814,  815,  814,  815,  816,  817,
      818,  819,  820,  821,  822,  823,  824,  825,  826,  827,
      828,  829,  830,  831,  832,  833,  834,  835,  836,  837,
      838,  839,  840,  841,  842,  843,  844,  845,  846,  847,
      848,  849,  850,  851,  852,  853,  854,  855,  856,  857,
      858,  859,  860,  861,  863,  865,  866,  867,  868,  869,
      870,  871,  872,  873,  874,  875,  876,  877,  878,  879,

      880,  881,  882,  883,  884,  885,  886,  887,  888,  889,
      890,  891,  892,  891,  893,  894,  895,  890,  896,  897,
      898,  899,  900,  902,  904,  905,  906,  907,  908,  909,
      910,  911,  912,  913,  914,  915,  916,  917,  918,  919,
      920,  921,  922,  923,  924,  925,  927,  929,  932,  933,
      934,  935,  936,  937,  938,  934,  935,  936,  937,  934,
      935,  936,  937,  939,  940,  941,  942,  943,  944,  945,
      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,
      956,  957,  958,  959,  960,  961,  962,  963,  964,  965,
      966,  967,  968,  969,  970,  971,  972,  973,  974,  975,

      976,  978,  980,  982,  983,  984,  985,  986,  987,  988,
      989,  990,  991,  992,  993,  994,  995,  996,  997,  998,
      999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008,
     1009, 1010, 1011, 1012, 1013, 1014, 1015, 1014, 1016, 1017,
     1018, 1019, 1020, 1021, 1023, 1024, 1025, 1026, 1025, 1027,
     1028, 1030, 1031, 1032, 1033, 1034, 1035, 1034, 1036, 1037,
     1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
     1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061,
     1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
     1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,

     1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091,
     1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102,
     1104, 1107, 1108, 1109, 1110, 1112, 1114, 1115, 1116, 1117,
     1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128,
     1129, 1130, 1131, 1132, 1131, 1132, 1133, 1134, 1135, 1136,
     1137, 1135, 1139, 1140, 1136, 1142, 1135, 1143, 1136, 1146,
     1135, 1147, 1146, 1148, 1151, 1152, 1153, 1154, 1155, 1156,
     1157, 1155, 1161, 1163, 1166, 1167, 1168, 1169, 1170, 1171,
     1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181,
     1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191,

     1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201,
     1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
     1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221,
     1222, 1223, 1224, 1231, 1232, 1234, 1235, 1236, 1237, 1238,
     1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248,
     1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1259, 1260,
     1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270,
     1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
     1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
     1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,

     1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,
     1321, 1322, 1323, 1324, 1325, 1326, 1329, 1330, 1331, 1332,
     1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342,
     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
     1353, 1354, 1355, 1357, 1358, 1359, 1360, 1361, 1363, 1365,
     1366, 1367, 1368, 1369, 1373, 1374, 1375, 1376, 1377, 1378,
     1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388,
     1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398,
     1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408,

     1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,
     1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428,
     1429, 1434, 1435, 1436, 1437, 1438, 1439, 1440, 1441, 1442,
     1443, 1444, 1445, 1446, 1448, 1449, 1451, 1452, 1455, 1458,
     1459, 1460, 1461, 1464, 1465, 1466, 1467, 1468, 1469, 1470,
     1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480,
     1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490,
     1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
     1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510,
     1511, 1512, 1513, 1514, 1515, 1516, 1517, 1518, 1520, 1522,

     1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532,
     1533, 1535, 1537, 1538, 1539, 1540, 1541, 1542, 1543, 1544,
     1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554,
     1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562, 1563, 1564,
     1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574,
     1575, 1577, 1579, 1581, 1583, 1585, 1587, 1589, 1591, 1592,
     1593, 1594, 1597, 1599, 1600, 1601, 1604, 1605, 1606, 1607,
     1608, 1609, 1611, 1612, 1614, 1615, 1619, 1620, 1621, 1622,
     1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1633,
     1635, 1637, 1638, 1639, 1640, 1642, 1644, 1646, 1647, 1648,

     1649, 1650, 1659, 1660, 1661, 1663, 1664, 1665, 1666, 1667,
     1668, 1669, 1670, 1671, 1674, 1675, 1677, 1678, 1679, 1680,
     1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1690, 1692,
     1694, 1699, 1701, 1702, 1705, 1706, 1707, 1708, 1709, 1710,
     1711, 1712, 1713, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
     1723, 1724, 1725, 1726, 1727, 1728, 1729, 1733, 1737, 1738,
     1739, 1740, 1742, 1744, 1745, 1747, 1748, 1750, 1751, 1753,
     1754, 1758, 1759, 1760, 1761, 1764, 1766, 1768, 1770, 1772,
     1774, 1775, 1776, 1777, 1778, 1786, 1786, 1786, 1786, 1787,
     1787, 1787, 1787, 1788, 1789, 1789, 1790, 1790, 1791,  680,

     1791, 1791,  679,  678,  677,  673,  672,  671,  669,  668,
      667,  666,  665,  663,  662,  661,  659,  658,  657,  655,
      654,  653,  652,  651,  650,  649,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,
      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  620,  619,  618,  617,  616,  613,  612,
      611,  610,  609,  608,  607,  606,  605,  604,  603,  602,
      601,  600,  599,  598,  597,  596,  595,  594,  593,  592,
      588,  585,  584,  583,  582,  580,  579,  578,  577,  575,
      573,  571,  570,  569,  568,  567,  566,  565,  563,  562,

      561,  560,  558,  557,  556,  555,  554,  553,  552,  551,
      549,  547,  545,  544,  543,  542,  541,  540,  539,  538,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  513,  512,  511,  510,  509,  508,  507,  505,
      504,  503,  502,  492,  491,  490,  489,  487,  486,  485,
      484,  483,  482,  480,  478,  477,  476,  475,  474,  473,
      472,  469,  466,  465,  463,  462,  461,  460,  459,  456,
      455,  453,  452,  451,  449,  448,  446,  443,  442,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,

      429,  428,  427,  426,  425,  424,  422,  419,  418,  417,
      416,  415,  414,  413,  412,  411,  410,  409,  408,  407,
      406,  404,  403,  402,  401,  400,  399,  397,  396,  394,
      392,  390,  389,  388,  387,  386,  385,  384,  382,  381,
      380,  379,  377,  376,  375,  374,  373,  372,  371,  370,
      368,  367,  366,  365,  364,  363,  362,  361,  359,  358,
      356,  355,  354,  353,  352,  351,  350,  349,  348,  347,
      346,  345,  344,  343,  342,  341,  338,  337,  336,  335,
      334,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  316,  315,  314,  310,  309,

      308,  306,  305,  304,  303,  302,  301,  300,  298,  297,
      296,  295,  294,  293,  292,  290,  289,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  270,  269,  268,  267,  266,  265,
      264,  263,  261,  260,  259,  258,  256,  255,  254,  253,
      252,  251,  250,  249,  248,  247,  245,  244,  242,  241,
      240,  239,  238,  237,  235,  232,  231,  230,  229,  228,
      227,  226,  225,  224,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  207,  206,
      205,  204,  203,  202,  201,  200,  195,  194,  193,  190,

      188,  187,  186,  185,  184,  183,  182,  180,  175,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  164,
      162,  161,  160,  158,  155,  152,  151,  150,  149,  148,
      147,  146,  145,  144,  143,  142,  141,  140,  139,  137,
      136,  135,  134,  133,  132,  131,  130,  129,  128,  127,
      126,  124,  123,  122,  121,  120,  119,  118,  117,  116,
      115,  114,  112,  111,  110,  109,  108,  107,  105,  104,
      103,  102,  101,  100,   94,   93,   91,   90,   89,   88,
       87,   86,   85,   84,   83,   82,   81,   80,   77,   76,
       75,   72,   71,   64,   60,   59,   58,   46,   45,   43,

     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785,
     1785, 1785, 1785, 1785, 1785, 1785, 1785, 1785
    } ;

static const flex_int16_t yy_rule_linenum[210] =
    {   0,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
       85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
      115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
      125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
      135,  136,  137,  138,  139,  140,  141,  142,  143,  144,
      145,  146,  147,  148,  149,  150,  151,  152,  153,  154,

      155,  156,  157,  158,  159,  160,  161,  162,  163,  164,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  174,
      175,  176,  177,  178,  179,  180,  181,  182,  183,  184,
      185,  186,  187,  188,  189,  190,  191,  192,  193,  194,
      195,  196,  197,  198,  199,  200,  201,  202,  203,  204,
      205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
      215,  216,  217,  218,  219,  220,  221,  222,  223,  224,
      225,  226,  227,  228,  229,  230,  231,  232,  233,  234,
      235,  236,  237,  238,  239,  241,  248,  254,  261,  267,
      271,  284,  291,  298,  301,  305,  309,  310,  311,  312,

      313,  314,  315,  316,  317,  318,  320,  321,  322
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "Scanner.ll"
#line 2 "Scanner.ll"
    #include <cerrno>
    #include <climits>
    #include <cstdlib>
    #include <cstring> // strerror
    #include <string>
    #include <iostream>
    #include "driver.hpp"
    #include "Scanner.hpp"
	#pragma warning(push, 0)
	#include "Parser.hpp"
    #define MAX_STR_CONST 16382 // TODO: Change this and make it dynamic... shaders could be big

    int  bracket_level = 0;
    char  *string_buf_ptr;

#line 1540 "Scanner.cpp"
#define YY_NO_INPUT 1
#line 25 "Scanner.ll"
  // A number symbol corresponding to the value in S.
  yy::parser::symbol_type make_INT(
    const std::string &s,
    const yy::parser::location_type& loc
  );
#line 1548 "Scanner.cpp"

#line 40 "Scanner.ll"
  // Code run each time a pattern is matched.
  # define YY_USER_ACTION  loc.columns (yyleng);
#line 1553 "Scanner.cpp"
#line 1554 "Scanner.cpp"

#define INITIAL 0
#define fbo 1
#define fbo1 2
#define clearmode 3
#define rendermode 4
#define incl 5
#define comment 6
#define comment2 7
#define str 8
#define shader 9
#define shaderbody 10
#define cstbuffer 11
#define technique 12
#define pass 13
#define sampler_state 14
#define dst_state 15
#define pr_state 16
#define color_sample_state 17
#define rasterization_state 18
#define resource 19
#define resource1 20

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 43 "Scanner.ll"


#line 46 "Scanner.ll"
  // A handy shortcut to the location held by the driver.
  yy::location& loc = driver.location;
  // Code run each time yylex is called.
  loc.step();
  int  comment_caller;
  char  string_buf[MAX_STR_CONST];



#line 1779 "Scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1786 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1785 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 210 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 210 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 211 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 55 "Scanner.ll"
{ return yy::parser::make_FORMAT_UNDEFINED(VK_FORMAT_UNDEFINED, loc); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 56 "Scanner.ll"
{ return yy::parser::make_FORMAT_R4G4_UNORM_PACK8(VK_FORMAT_R4G4_UNORM_PACK8, loc); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 57 "Scanner.ll"
{ return yy::parser::make_FORMAT_R4G4B4A4_UNORM_PACK16(VK_FORMAT_R4G4B4A4_UNORM_PACK16, loc); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 58 "Scanner.ll"
{ return yy::parser::make_FORMAT_B4G4R4A4_UNORM_PACK16(VK_FORMAT_B4G4R4A4_UNORM_PACK16, loc); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 59 "Scanner.ll"
{ return yy::parser::make_FORMAT_R5G6B5_UNORM_PACK16(VK_FORMAT_R5G6B5_UNORM_PACK16, loc); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 60 "Scanner.ll"
{ return yy::parser::make_FORMAT_B5G6R5_UNORM_PACK16(VK_FORMAT_B5G6R5_UNORM_PACK16, loc); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "Scanner.ll"
{ return yy::parser::make_FORMAT_R5G5B5A1_UNORM_PACK16(VK_FORMAT_R5G5B5A1_UNORM_PACK16, loc); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 62 "Scanner.ll"
{ return yy::parser::make_FORMAT_B5G5R5A1_UNORM_PACK16(VK_FORMAT_B5G5R5A1_UNORM_PACK16, loc); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 63 "Scanner.ll"
{ return yy::parser::make_FORMAT_A1R5G5B5_UNORM_PACK16(VK_FORMAT_A1R5G5B5_UNORM_PACK16, loc); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 64 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8_UNORM(VK_FORMAT_R8_UNORM, loc); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 65 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8_SNORM(VK_FORMAT_R8_SNORM, loc); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 66 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8_USCALED(VK_FORMAT_R8_USCALED, loc); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 67 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8_SSCALED(VK_FORMAT_R8_SSCALED, loc); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 68 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8_UINT(VK_FORMAT_R8_UINT, loc); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 69 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8_SINT(VK_FORMAT_R8_SINT, loc); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 70 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8_SRGB(VK_FORMAT_R8_SRGB, loc); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 71 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8_UNORM(VK_FORMAT_R8G8_UNORM, loc); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8_SNORM(VK_FORMAT_R8G8_SNORM, loc); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 73 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8_USCALED(VK_FORMAT_R8G8_USCALED, loc); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 74 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8_SSCALED(VK_FORMAT_R8G8_SSCALED, loc); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 75 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8_UINT(VK_FORMAT_R8G8_UINT, loc); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 76 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8_SINT(VK_FORMAT_R8G8_SINT, loc); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 77 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8_SRGB(VK_FORMAT_R8G8_SRGB, loc); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 78 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8_UNORM(VK_FORMAT_R8G8B8_UNORM, loc); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 79 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8_SNORM(VK_FORMAT_R8G8B8_SNORM, loc); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 80 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8_USCALED(VK_FORMAT_R8G8B8_USCALED, loc); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 81 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8_SSCALED(VK_FORMAT_R8G8B8_SSCALED, loc); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 82 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8_UINT(VK_FORMAT_R8G8B8_UINT, loc); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 83 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8_SINT(VK_FORMAT_R8G8B8_SINT, loc); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 84 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8_SRGB(VK_FORMAT_R8G8B8_SRGB, loc); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 85 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8_UNORM(VK_FORMAT_B8G8R8_UNORM, loc); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 86 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8_SNORM(VK_FORMAT_B8G8R8_SNORM, loc); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 87 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8_USCALED(VK_FORMAT_B8G8R8_USCALED, loc); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 88 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8_SSCALED(VK_FORMAT_B8G8R8_SSCALED, loc); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 89 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8_UINT(VK_FORMAT_B8G8R8_UINT, loc); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 90 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8_SINT(VK_FORMAT_B8G8R8_SINT, loc); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 91 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8_SRGB(VK_FORMAT_B8G8R8_SRGB, loc); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 92 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8A8_UNORM(VK_FORMAT_R8G8B8A8_UNORM, loc); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 93 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8A8_SNORM(VK_FORMAT_R8G8B8A8_SNORM, loc); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 94 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8A8_USCALED(VK_FORMAT_R8G8B8A8_USCALED, loc); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8A8_SSCALED(VK_FORMAT_R8G8B8A8_SSCALED, loc); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 96 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8A8_UINT(VK_FORMAT_R8G8B8A8_UINT, loc); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 97 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8A8_SINT(VK_FORMAT_R8G8B8A8_SINT, loc); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 98 "Scanner.ll"
{ return yy::parser::make_FORMAT_R8G8B8A8_SRGB(VK_FORMAT_R8G8B8A8_SRGB, loc); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 99 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8A8_UNORM(VK_FORMAT_B8G8R8A8_UNORM, loc); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 100 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8A8_SNORM(VK_FORMAT_B8G8R8A8_SNORM, loc); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 101 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8A8_USCALED(VK_FORMAT_B8G8R8A8_USCALED, loc); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 102 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8A8_SSCALED(VK_FORMAT_B8G8R8A8_SSCALED, loc); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 103 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8A8_UINT(VK_FORMAT_B8G8R8A8_UINT, loc); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 104 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8A8_SINT(VK_FORMAT_B8G8R8A8_SINT, loc); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 105 "Scanner.ll"
{ return yy::parser::make_FORMAT_B8G8R8A8_SRGB(VK_FORMAT_B8G8R8A8_SRGB, loc); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 106 "Scanner.ll"
{ return yy::parser::make_FORMAT_A8B8G8R8_UNORM_PACK32(VK_FORMAT_A8B8G8R8_UNORM_PACK32, loc); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 107 "Scanner.ll"
{ return yy::parser::make_FORMAT_A8B8G8R8_SNORM_PACK32(VK_FORMAT_A8B8G8R8_SNORM_PACK32, loc); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 108 "Scanner.ll"
{ return yy::parser::make_FORMAT_A8B8G8R8_USCALED_PACK32(VK_FORMAT_A8B8G8R8_USCALED_PACK32, loc); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 109 "Scanner.ll"
{ return yy::parser::make_FORMAT_A8B8G8R8_SSCALED_PACK32(VK_FORMAT_A8B8G8R8_SSCALED_PACK32, loc); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 110 "Scanner.ll"
{ return yy::parser::make_FORMAT_A8B8G8R8_UINT_PACK32(VK_FORMAT_A8B8G8R8_UINT_PACK32, loc); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 111 "Scanner.ll"
{ return yy::parser::make_FORMAT_A8B8G8R8_SINT_PACK32(VK_FORMAT_A8B8G8R8_SINT_PACK32, loc); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 112 "Scanner.ll"
{ return yy::parser::make_FORMAT_A8B8G8R8_SRGB_PACK32(VK_FORMAT_A8B8G8R8_SRGB_PACK32, loc); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 113 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2R10G10B10_UNORM_PACK32(VK_FORMAT_A2R10G10B10_UNORM_PACK32, loc); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2R10G10B10_SNORM_PACK32(VK_FORMAT_A2R10G10B10_SNORM_PACK32, loc); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2R10G10B10_USCALED_PACK32(VK_FORMAT_A2R10G10B10_USCALED_PACK32, loc); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2R10G10B10_SSCALED_PACK32(VK_FORMAT_A2R10G10B10_SSCALED_PACK32, loc); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2R10G10B10_UINT_PACK32(VK_FORMAT_A2R10G10B10_UINT_PACK32, loc); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2R10G10B10_SINT_PACK32(VK_FORMAT_A2R10G10B10_SINT_PACK32, loc); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2B10G10R10_UNORM_PACK32(VK_FORMAT_A2B10G10R10_UNORM_PACK32, loc); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 120 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2B10G10R10_SNORM_PACK32(VK_FORMAT_A2B10G10R10_SNORM_PACK32, loc); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 121 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2B10G10R10_USCALED_PACK32(VK_FORMAT_A2B10G10R10_USCALED_PACK32, loc); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 122 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2B10G10R10_SSCALED_PACK32(VK_FORMAT_A2B10G10R10_SSCALED_PACK32, loc); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 123 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2B10G10R10_UINT_PACK32(VK_FORMAT_A2B10G10R10_UINT_PACK32, loc); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 124 "Scanner.ll"
{ return yy::parser::make_FORMAT_A2B10G10R10_SINT_PACK32(VK_FORMAT_A2B10G10R10_SINT_PACK32, loc); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 125 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16_UNORM(VK_FORMAT_R16_UNORM, loc); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 126 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16_SNORM(VK_FORMAT_R16_SNORM, loc); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 127 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16_USCALED(VK_FORMAT_R16_USCALED, loc); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 128 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16_SSCALED(VK_FORMAT_R16_SSCALED, loc); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 129 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16_UINT(VK_FORMAT_R16_UINT, loc); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 130 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16_SINT(VK_FORMAT_R16_SINT, loc); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 131 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16_SFLOAT(VK_FORMAT_R16_SFLOAT, loc); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 132 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16_UNORM(VK_FORMAT_R16G16_UNORM, loc); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 133 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16_SNORM(VK_FORMAT_R16G16_SNORM, loc); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 134 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16_USCALED(VK_FORMAT_R16G16_USCALED, loc); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 135 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16_SSCALED(VK_FORMAT_R16G16_SSCALED, loc); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 136 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16_UINT(VK_FORMAT_R16G16_UINT, loc); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 137 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16_SINT(VK_FORMAT_R16G16_SINT, loc); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 138 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16_SFLOAT(VK_FORMAT_R16G16_SFLOAT, loc); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 139 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16_UNORM(VK_FORMAT_R16G16B16_UNORM, loc); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 140 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16_SNORM(VK_FORMAT_R16G16B16_SNORM, loc); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 141 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16_USCALED(VK_FORMAT_R16G16B16_USCALED, loc); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 142 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16_SSCALED(VK_FORMAT_R16G16B16_SSCALED, loc); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 143 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16_UINT(VK_FORMAT_R16G16B16_UINT, loc); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 144 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16_SINT(VK_FORMAT_R16G16B16_SINT, loc); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 145 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16_SFLOAT(VK_FORMAT_R16G16B16_SFLOAT, loc); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 146 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16A16_UNORM(VK_FORMAT_R16G16B16A16_UNORM, loc); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 147 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16A16_SNORM(VK_FORMAT_R16G16B16A16_SNORM, loc); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 148 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16A16_USCALED(VK_FORMAT_R16G16B16A16_USCALED, loc); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 149 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16A16_SSCALED(VK_FORMAT_R16G16B16A16_SSCALED, loc); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 150 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16A16_UINT(VK_FORMAT_R16G16B16A16_UINT, loc); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 151 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16A16_SINT(VK_FORMAT_R16G16B16A16_SINT, loc); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 152 "Scanner.ll"
{ return yy::parser::make_FORMAT_R16G16B16A16_SFLOAT(VK_FORMAT_R16G16B16A16_SFLOAT, loc); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 153 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32_UINT(VK_FORMAT_R32_UINT, loc); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 154 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32_SINT(VK_FORMAT_R32_SINT, loc); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 155 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32_SFLOAT(VK_FORMAT_R32_SFLOAT, loc); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 156 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32G32_UINT(VK_FORMAT_R32G32_UINT, loc); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 157 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32G32_SINT(VK_FORMAT_R32G32_SINT, loc); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 158 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32G32_SFLOAT(VK_FORMAT_R32G32_SFLOAT, loc); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 159 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32G32B32_UINT(VK_FORMAT_R32G32B32_UINT, loc); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 160 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32G32B32_SINT(VK_FORMAT_R32G32B32_SINT, loc); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 161 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32G32B32_SFLOAT(VK_FORMAT_R32G32B32_SFLOAT, loc); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 162 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32G32B32A32_UINT(VK_FORMAT_R32G32B32A32_UINT, loc); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 163 "Scanner.ll"
{ return yy::parser::make_FORMAT_R32G32B32A32_SINT(VK_FORMAT_R32G32B32A32_SINT, loc); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 164 "Scanner.ll"
{ gEnv->pLog->LogWarning("Suka %d", VK_FORMAT_R32G32B32A32_SFLOAT); return yy::parser::make_FORMAT_R32G32B32A32_SFLOAT(VK_FORMAT_R32G32B32A32_SFLOAT, loc); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 165 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64_UINT(VK_FORMAT_R64_UINT, loc); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 166 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64_SINT(VK_FORMAT_R64_SINT, loc); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 167 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64_SFLOAT(VK_FORMAT_R64_SFLOAT, loc); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 168 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64G64_UINT(VK_FORMAT_R64G64_UINT, loc); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 169 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64G64_SINT(VK_FORMAT_R64G64_SINT, loc); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 170 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64G64_SFLOAT(VK_FORMAT_R64G64_SFLOAT, loc); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 171 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64G64B64_UINT(VK_FORMAT_R64G64B64_UINT, loc); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 172 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64G64B64_SINT(VK_FORMAT_R64G64B64_SINT, loc); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 173 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64G64B64_SFLOAT(VK_FORMAT_R64G64B64_SFLOAT, loc); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 174 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64G64B64A64_UINT(VK_FORMAT_R64G64B64A64_UINT, loc); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 175 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64G64B64A64_SINT(VK_FORMAT_R64G64B64A64_SINT, loc); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 176 "Scanner.ll"
{ return yy::parser::make_FORMAT_R64G64B64A64_SFLOAT(VK_FORMAT_R64G64B64A64_SFLOAT, loc); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 177 "Scanner.ll"
{ return yy::parser::make_FORMAT_B10G11R11_UFLOAT_PACK32(VK_FORMAT_B10G11R11_UFLOAT_PACK32, loc); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 178 "Scanner.ll"
{ return yy::parser::make_FORMAT_E5B9G9R9_UFLOAT_PACK32(VK_FORMAT_E5B9G9R9_UFLOAT_PACK32, loc); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 179 "Scanner.ll"
{ return yy::parser::make_FORMAT_D16_UNORM(VK_FORMAT_D16_UNORM, loc); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 180 "Scanner.ll"
{ return yy::parser::make_FORMAT_X8_D24_UNORM_PACK32(VK_FORMAT_X8_D24_UNORM_PACK32, loc); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 181 "Scanner.ll"
{ return yy::parser::make_FORMAT_D32_SFLOAT(VK_FORMAT_D32_SFLOAT, loc); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 182 "Scanner.ll"
{ return yy::parser::make_FORMAT_S8_UINT(VK_FORMAT_S8_UINT, loc); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 183 "Scanner.ll"
{ return yy::parser::make_FORMAT_D16_UNORM_S8_UINT(VK_FORMAT_D16_UNORM_S8_UINT, loc); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 184 "Scanner.ll"
{ return yy::parser::make_FORMAT_D24_UNORM_S8_UINT(VK_FORMAT_D24_UNORM_S8_UINT, loc); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 185 "Scanner.ll"
{ return yy::parser::make_FORMAT_D32_SFLOAT_S8_UINT(VK_FORMAT_D32_SFLOAT_S8_UINT, loc); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 186 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC1_RGB_UNORM_BLOCK(VK_FORMAT_BC1_RGB_UNORM_BLOCK, loc); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 187 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC1_RGB_SRGB_BLOCK(VK_FORMAT_BC1_RGB_SRGB_BLOCK, loc); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 188 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC1_RGBA_UNORM_BLOCK(VK_FORMAT_BC1_RGBA_UNORM_BLOCK, loc); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 189 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC1_RGBA_SRGB_BLOCK(VK_FORMAT_BC1_RGBA_SRGB_BLOCK, loc); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 190 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC2_UNORM_BLOCK(VK_FORMAT_BC2_UNORM_BLOCK, loc); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 191 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC2_SRGB_BLOCK(VK_FORMAT_BC2_SRGB_BLOCK, loc); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 192 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC3_UNORM_BLOCK(VK_FORMAT_BC3_UNORM_BLOCK, loc); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 193 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC3_SRGB_BLOCK(VK_FORMAT_BC3_SRGB_BLOCK, loc); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 194 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC4_UNORM_BLOCK(VK_FORMAT_BC4_UNORM_BLOCK, loc); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 195 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC4_SNORM_BLOCK(VK_FORMAT_BC4_SNORM_BLOCK, loc); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 196 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC5_UNORM_BLOCK(VK_FORMAT_BC5_UNORM_BLOCK, loc); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 197 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC5_SNORM_BLOCK(VK_FORMAT_BC5_SNORM_BLOCK, loc); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 198 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC6H_UFLOAT_BLOCK(VK_FORMAT_BC6H_UFLOAT_BLOCK, loc); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 199 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC6H_SFLOAT_BLOCK(VK_FORMAT_BC6H_SFLOAT_BLOCK, loc); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 200 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC7_UNORM_BLOCK(VK_FORMAT_BC7_UNORM_BLOCK, loc); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 201 "Scanner.ll"
{ return yy::parser::make_FORMAT_BC7_SRGB_BLOCK(VK_FORMAT_BC7_SRGB_BLOCK, loc); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 202 "Scanner.ll"
{ return yy::parser::make_FORMAT_ETC2_R8G8B8_UNORM_BLOCK(VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, loc); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 203 "Scanner.ll"
{ return yy::parser::make_FORMAT_ETC2_R8G8B8_SRGB_BLOCK(VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, loc); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 204 "Scanner.ll"
{ return yy::parser::make_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK(VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, loc); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 205 "Scanner.ll"
{ return yy::parser::make_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK(VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, loc); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 206 "Scanner.ll"
{ return yy::parser::make_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK(VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, loc); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 207 "Scanner.ll"
{ return yy::parser::make_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK(VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, loc); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 208 "Scanner.ll"
{ return yy::parser::make_FORMAT_EAC_R11_UNORM_BLOCK(VK_FORMAT_EAC_R11_UNORM_BLOCK, loc); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 209 "Scanner.ll"
{ return yy::parser::make_FORMAT_EAC_R11_SNORM_BLOCK(VK_FORMAT_EAC_R11_SNORM_BLOCK, loc); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 210 "Scanner.ll"
{ return yy::parser::make_FORMAT_EAC_R11G11_UNORM_BLOCK(VK_FORMAT_EAC_R11G11_UNORM_BLOCK, loc); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 211 "Scanner.ll"
{ return yy::parser::make_FORMAT_EAC_R11G11_SNORM_BLOCK(VK_FORMAT_EAC_R11G11_SNORM_BLOCK, loc); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 212 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_4x4_UNORM_BLOCK(VK_FORMAT_ASTC_4x4_UNORM_BLOCK, loc); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 213 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_4x4_SRGB_BLOCK(VK_FORMAT_ASTC_4x4_SRGB_BLOCK, loc); }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 214 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_5x4_UNORM_BLOCK(VK_FORMAT_ASTC_5x4_UNORM_BLOCK, loc); }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 215 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_5x4_SRGB_BLOCK(VK_FORMAT_ASTC_5x4_SRGB_BLOCK, loc); }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 216 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_5x5_UNORM_BLOCK(VK_FORMAT_ASTC_5x5_UNORM_BLOCK, loc); }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 217 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_5x5_SRGB_BLOCK(VK_FORMAT_ASTC_5x5_SRGB_BLOCK, loc); }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 218 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_6x5_UNORM_BLOCK(VK_FORMAT_ASTC_6x5_UNORM_BLOCK, loc); }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 219 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_6x5_SRGB_BLOCK(VK_FORMAT_ASTC_6x5_SRGB_BLOCK, loc); }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 220 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_6x6_UNORM_BLOCK(VK_FORMAT_ASTC_6x6_UNORM_BLOCK, loc); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 221 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_6x6_SRGB_BLOCK(VK_FORMAT_ASTC_6x6_SRGB_BLOCK, loc); }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 222 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_8x5_UNORM_BLOCK(VK_FORMAT_ASTC_8x5_UNORM_BLOCK, loc); }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 223 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_8x5_SRGB_BLOCK(VK_FORMAT_ASTC_8x5_SRGB_BLOCK, loc); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 224 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_8x6_UNORM_BLOCK(VK_FORMAT_ASTC_8x6_UNORM_BLOCK, loc); }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 225 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_8x6_SRGB_BLOCK(VK_FORMAT_ASTC_8x6_SRGB_BLOCK, loc); }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 226 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_8x8_UNORM_BLOCK(VK_FORMAT_ASTC_8x8_UNORM_BLOCK, loc); }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 227 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_8x8_SRGB_BLOCK(VK_FORMAT_ASTC_8x8_SRGB_BLOCK, loc); }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 228 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_10x5_UNORM_BLOCK(VK_FORMAT_ASTC_10x5_UNORM_BLOCK, loc); }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 229 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_10x5_SRGB_BLOCK(VK_FORMAT_ASTC_10x5_SRGB_BLOCK, loc); }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 230 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_10x6_UNORM_BLOCK(VK_FORMAT_ASTC_10x6_UNORM_BLOCK, loc); }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 231 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_10x6_SRGB_BLOCK(VK_FORMAT_ASTC_10x6_SRGB_BLOCK, loc); }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 232 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_10x8_UNORM_BLOCK(VK_FORMAT_ASTC_10x8_UNORM_BLOCK, loc); }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 233 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_10x8_SRGB_BLOCK(VK_FORMAT_ASTC_10x8_SRGB_BLOCK, loc); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 234 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_10x10_UNORM_BLOCK(VK_FORMAT_ASTC_10x10_UNORM_BLOCK, loc); }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 235 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_10x10_SRGB_BLOCK(VK_FORMAT_ASTC_10x10_SRGB_BLOCK, loc); }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 236 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_12x10_UNORM_BLOCK(VK_FORMAT_ASTC_12x10_UNORM_BLOCK, loc); }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 237 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_12x10_SRGB_BLOCK(VK_FORMAT_ASTC_12x10_SRGB_BLOCK, loc); }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 238 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_12x12_UNORM_BLOCK(VK_FORMAT_ASTC_12x12_UNORM_BLOCK, loc); }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 239 "Scanner.ll"
{ return yy::parser::make_FORMAT_ASTC_12x12_SRGB_BLOCK(VK_FORMAT_ASTC_12x12_SRGB_BLOCK, loc); }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 241 "Scanner.ll"
{
    //comment_caller  =  INITIAL;
    bracket_level = 0;
    yy_push_state(shader);
	return yy::parser::make_GLSLSHADER(loc);
}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 248 "Scanner.ll"
return yy::parser::make_VERTEXFORMAT(loc);
	YY_BREAK
/*==================================================================
      rules for inside a GLSL section
    */

case 188:
YY_RULE_SETUP
#line 254 "Scanner.ll"
{
        bracket_level = 1; // must be one...
        string_buf_ptr  =  string_buf;
        *string_buf_ptr = '\0';
        yy_push_state(shaderbody);
		return yy::parser::make_LEFTSCOPE(loc);
    }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 261 "Scanner.ll"
{
        // TODO create and REGISTER the variable in a table
		return yy::parser::make_IDENTIFIER(yytext, loc);
    }
	YY_BREAK


case 190:
YY_RULE_SETUP
#line 267 "Scanner.ll"
{
        bracket_level++;
        *string_buf_ptr++  =  yytext[0];
    }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 271 "Scanner.ll"
{
        bracket_level--;
        if((bracket_level) == 0)
        {
            *string_buf_ptr  =  '\0';
            // shall I just do BEGIN(INITIAL) ?
            yy_pop_state(); // back to shader
            yy_pop_state();// back to INITIAL
			return yy::parser::make_CODEBODY(string_buf, loc);
        } else {
            *string_buf_ptr++  =  yytext[0];
        }
    }
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 284 "Scanner.ll"
{  /*copy the GLSL data*/
        char  *yptr  =  yytext;
        while  (  *yptr  )
        *string_buf_ptr++  =  *yptr++;
        //TODO:
		loc.lines (yyleng); loc.step ();
    }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 291 "Scanner.ll"
{  /*copy the GLSL data*/
        char  *yptr  =  yytext;
        while  (  *yptr  )
        *string_buf_ptr++  =  *yptr++;
    }
	YY_BREAK

case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 298 "Scanner.ll"
{
    loc.lines (yyleng); loc.step ();
}
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 301 "Scanner.ll"
{
    loc.step ();
}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 305 "Scanner.ll"
{
              std::cout << loc.begin.line << " " << loc.end.line << std::endl;
              return yy::parser::make_MINUS  (loc);
           }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 309 "Scanner.ll"
return yy::parser::make_PLUS   (loc);
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 310 "Scanner.ll"
return yy::parser::make_STAR   (loc);
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 311 "Scanner.ll"
return yy::parser::make_SLASH  (loc);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 312 "Scanner.ll"
return yy::parser::make_LPAREN (loc);
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 313 "Scanner.ll"
return yy::parser::make_RPAREN (loc);
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 314 "Scanner.ll"
return yy::parser::make_ASSIGN (loc);
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 315 "Scanner.ll"
return yy::parser::make_SEMICOLON(loc);
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 316 "Scanner.ll"
return yy::parser::make_LEFTSCOPE(loc);
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 317 "Scanner.ll"
return yy::parser::make_RIGHTSCOPE(loc);
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 318 "Scanner.ll"
return yy::parser::make_COMMA(loc);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 320 "Scanner.ll"
return make_INT(yytext, loc);
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 321 "Scanner.ll"
return yy::parser::make_IDENTIFIER(yytext, loc);
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 322 "Scanner.ll"
{
                throw yy::parser::syntax_error(loc, "invalid character: " + std::string(yytext));
           }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(fbo):
case YY_STATE_EOF(fbo1):
case YY_STATE_EOF(clearmode):
case YY_STATE_EOF(rendermode):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(comment2):
case YY_STATE_EOF(str):
case YY_STATE_EOF(shader):
case YY_STATE_EOF(shaderbody):
case YY_STATE_EOF(cstbuffer):
case YY_STATE_EOF(technique):
case YY_STATE_EOF(pass):
case YY_STATE_EOF(sampler_state):
case YY_STATE_EOF(dst_state):
case YY_STATE_EOF(pr_state):
case YY_STATE_EOF(color_sample_state):
case YY_STATE_EOF(rasterization_state):
case YY_STATE_EOF(resource):
case YY_STATE_EOF(resource1):
#line 325 "Scanner.ll"
return yy::parser::make_END (loc);
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 330 "Scanner.ll"
ECHO;
	YY_BREAK
#line 2985 "Scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1786 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1786 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1785);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 330 "Scanner.ll"


yy::parser::symbol_type make_INT(
  const std::string &s,
  const yy::parser::location_type& loc
) {
  errno = 0;
  long n = strtol(s.c_str(), NULL, 10);
  if (! (INT_MIN <= n && n <= INT_MAX && errno != ERANGE))
    throw yy::parser::syntax_error(loc, "integer is out of range: " + s);
  return yy::parser::make_INT((int) n, loc);
}

#pragma warning(pop)

