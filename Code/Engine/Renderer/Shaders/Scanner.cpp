#line 1 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

#line 3 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::streambuf* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int Scanner::yylex()

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 85
#define YY_END_OF_BUFFER 86
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[407] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   83,   83,   44,   44,   48,   48,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   86,   81,   77,   76,
       50,   81,   81,   81,   81,   78,   80,   80,   80,   80,
       80,   80,   80,   81,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   11,   12,   85,   84,   83,
       83,   44,   46,   45,   48,   49,   61,   52,   51,   61,

       85,   80,   62,   65,   65,   64,   85,   65,   65,   65,
       65,   65,   65,   65,   65,   63,   80,   11,   12,   80,
       67,   68,   80,   69,   70,   74,   75,   77,   76,    0,
        0,   79,   79,   42,   43,   78,   80,   80,   80,   80,
       80,   80,   80,    0,   80,   80,   80,   80,    9,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   84,   83,
       83,   44,   45,   45,   47,   48,   61,   42,   43,   60,
       53,   54,   58,   59,   55,   57,   56,   80,   65,   65,
       65,   65,   65,    9,   65,   65,   65,   65,   65,   65,
       65,   80,   80,   80,    0,   80,   80,   80,   80,   80,

       80,   80,    0,   80,   80,   80,   80,   32,   80,   80,
       10,   80,   80,   80,   80,   80,   80,   53,   54,   80,
       65,   65,   65,   32,   65,   65,   10,   65,   65,   65,
       65,   65,   80,   80,    0,   80,   80,   80,   80,   80,
       80,   80,    0,   28,   80,   80,   80,   33,   34,   35,
       80,   22,   23,   24,   80,   80,   80,   80,   80,   19,
       20,   21,   13,   53,   28,   65,   65,   33,   34,   35,
       65,   22,   23,   24,   65,   65,   65,   19,   20,   21,
       13,   66,   80,    0,   80,   80,   80,   80,   80,   80,
       80,    0,   29,   30,   31,   80,   15,   36,   37,   38,

       80,   80,   80,   80,   80,   29,   30,   31,   15,   36,
       37,   38,   65,   65,   65,   80,    0,   80,   80,   80,
       80,   80,   80,   80,    4,   80,   16,   17,   18,   80,
       40,    8,   80,   80,   16,   17,   18,   40,   65,   65,
       80,    0,   80,   80,   80,   80,   80,   80,   80,   80,
        5,   80,   80,   80,   80,   39,   80,   65,   65,   65,
       39,   65,   82,   80,   80,   80,   80,   80,   80,   80,
       80,   25,   26,   27,    3,   14,   25,   26,   27,   14,
       80,   80,   80,   80,    2,    6,   80,   80,    1,   80,
       80,   80,   80,   80,   80,   72,   80,   80,   80,   80,

        7,   41,   71,   80,   73,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    7,    8,    1,    8,    9,   10,   11,   11,   12,
       13,   14,   11,   11,   11,   15,   15,    1,    1,   16,
        1,    1,    1,    1,   17,   17,   17,   18,   19,   20,
       21,   17,   17,   17,   17,   17,   17,   17,   17,   22,
       17,   17,   23,   24,   17,   25,   17,   17,   17,   17,
       26,   27,   28,   29,   17,    1,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   17,   17,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   17,   50,
       51,   17,   52,    1,   53,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[54] =
    {   0,
        1,    2,    3,    1,    4,    1,    5,    1,    1,    6,
        7,    7,    7,    7,    7,    1,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    1,    8,    1,    6,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    6,    6
    } ;

static const flex_int16_t yy_base[421] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   53,    0,    0,    0,    0,    0,
        0,    0,  105,  109,  106,  112,  685,  684,  113,  117,
      140,  188,  239,  291,  340,    0,  104,  108,  113,  151,
        0,    0,    0,    0,   76,   79,    0,    0,    0,    0,
      681,  680,  679,  678,  138,  162,  682,  689,  135,  678,
      689,  642,  239,  187,  126,  246,    0,  649,  644,  639,
      646,  641,  640,  647,   75,  641,  632,  114,  640,  621,
      634,  620,  632,  624,  128,  689,  689,  689,    0,  204,
      208,    0,  689,  167,    0,  689,    0,  689,  689,  211,

      383,  617,  689,    0,  144,  660,  215,  145,  623,  186,
      631,  612,  612,  617,  197,  689,  197,  689,  689,  627,
      689,  689,  622,  689,  689,  689,  689,  177,  652,  613,
      285,  293,  298,  689,  689,  337,    0,  606,  610,  601,
      610,  179,  604,  613,  605,  612,  597,  602,  596,  608,
      594,  593,  603,  593,  605,  218,  604,  597,    0,  260,
      267,    0,  237,  268,  689,    0,    0,    0,    0,  689,
      342,  347,  689,  689,  689,  689,  689,  589,    0,  269,
      591,  598,  589,  583,  595,  581,  580,  581,  244,  593,
      586,  576,  576,  576,  588,  589,  578,  583,  573,  578,

      567,  566,  571,  572,  578,  574,  578,  302,  575,  311,
        0,  568,  104,  570,  566,  322,  570,  352,  388,  564,
      562,  568,  569,  356,  566,  360,    0,  559,  561,  557,
      369,  561,  547,  545,  552,  551,  555,  549,  548,  545,
      537,  550,  555,    0,  392,  547,  534,    0,    0,    0,
      395,    0,    0,    0,  534,  538,  546,  535,  540,    0,
        0,    0,    0,  408,    0,  398,  528,    0,    0,    0,
      403,    0,    0,    0,  533,  531,  536,    0,    0,    0,
        0,    0,  537,  522,  550,  521,  544,  532,  527,  519,
      513,  534,    0,    0,    0,  527,  413,    0,    0,    0,

      513,  523,  511,  512,  515,    0,    0,    0,  419,    0,
        0,    0,  519,  509,  512,  502,  518,  505,  504,  511,
      502,  502,  511,  266,  689,  499,  493,  492,  491,  506,
        0,    0,  499,  504,  487,  486,  484,    0,  491,  483,
      493,  474,  455,  443,  462,  461,  435,  417,  371,  354,
        0,  378,  374,  370,  334,    0,  344,  364,  334,  328,
        0,  308,  689,  296,  309,  297,  281,  293,  303,  274,
      287,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      258,  247,  246,  237,    0,    0,  223,  212,    0,  203,
      187,  170,  186,  178,  172,    0,  161,  138,  124,  134,

        0,    0,    0,  119,    0,  689,  433,  441,  449,  457,
      465,  473,  134,  481,  489,  497,  505,  513,  520,  528
    } ;

static const flex_int16_t yy_def[421] =
    {   0,
      406,    1,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  406,   15,   15,   15,  407,  407,
      407,  407,  408,  408,  409,  409,  410,  410,  411,  411,
       15,   15,  412,  412,   15,   35,   35,   35,   35,   35,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   35,   35,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  413,  413,  413,  413,
      413,  413,  413,  406,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  406,  406,  406,  414,  406,
      414,  415,  406,  416,  417,  406,  418,  406,  406,  418,

      419,  413,  406,  420,  420,  406,  406,  420,  420,  420,
      420,  420,  420,  420,  420,  406,  413,  406,  406,  413,
      406,  406,  413,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  413,  413,  413,  413,
      413,  413,  413,  406,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  414,  406,
      414,  415,  416,  416,  406,  417,  418,  418,  418,  406,
      406,  406,  406,  406,  406,  406,  406,  413,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  413,  413,  413,  406,  413,  413,  413,  413,  413,

      413,  413,  406,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  406,  406,  413,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  420,  413,  413,  406,  413,  413,  413,  413,  413,
      413,  413,  406,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  406,  420,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  420,  420,  420,  420,  420,
      420,  413,  413,  406,  413,  413,  413,  413,  413,  413,
      413,  406,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  413,  420,  420,  420,  420,  420,
      420,  420,  420,  420,  420,  413,  406,  413,  413,  413,
      413,  413,  413,  413,  406,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  420,  420,  420,  420,  420,  420,
      413,  406,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  420,  420,  420,
      420,  420,  406,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  420,  420,  420,  420,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,
      413,  413,  413,  413,  413,  413,  413,  413,  413,  413,

      413,  413,  413,  413,  413,    0,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406
    } ;

static const flex_int16_t yy_nxt[743] =
    {   0,
       58,   59,   60,   59,   61,   62,   58,   63,   64,   65,
       66,   66,   66,   66,   66,   58,   67,   67,   67,   68,
       69,   70,   71,   72,   73,   74,   58,   58,   58,   67,
       75,   76,   67,   67,   77,   67,   67,   78,   67,   79,
       67,   80,   67,   67,   81,   82,   83,   84,   85,   67,
       67,   86,   87,   58,   59,   60,   59,   58,   58,   58,
       58,   58,   65,   58,   58,   58,   58,   58,   58,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   58,   58,
       58,   58,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   58,   58,   90,   88,   93,   91,
       90,   88,   94,   91,   93,   98,  145,   99,   94,   98,
       91,   99,  100,  146,   91,  120,  100,  126,  127,  120,
      126,  127,  134,   69,   70,  135,  128,  123,  128,  101,
      137,  256,   58,  101,   61,  180,  120,  180,   67,  102,
      120,  257,   67,  102,  149,  121,  122,   67,  102,  121,
      122,  157,  150,  405,  124,  125,   58,  404,  403,  158,
       75,   69,   70,  164,   77,  123,  165,   78,  128,   79,
      128,   80,   67,  102,  402,  102,  181,   84,   85,  126,
      127,  103,   61,  182,  401,   67,  102,  133,  133,  133,

      133,  133,  124,  125,  400,  160,   67,  102,  160,  160,
      200,  399,  161,  126,  127,  398,  397,  168,   75,  160,
      169,  134,   77,  161,  135,   78,  184,   79,  201,   80,
      190,  396,  395,  102,  185,   84,   85,  192,  191,  103,
      105,  106,  105,  406,  394,  150,  406,  131,  107,  132,
      132,  132,  132,  132,  131,  214,  136,  136,  136,  136,
      136,  160,  393,  215,  160,   88,  392,   88,  160,  108,
      180,  161,  180,  109,  164,  160,  110,  165,  111,  391,
      112,  229,  161,  390,  113,  349,  114,  115,  350,  230,
       88,  116,  105,  106,  105,  133,  133,  133,  133,  133,

      107,  131,  389,  132,  132,  132,  132,  132,  133,  133,
      133,  133,  133,  248,  249,  250,  388,   88,  387,   88,
      386,  108,  252,  253,  254,  109,  385,  384,  110,  383,
      111,  382,  112,  260,  261,  262,  113,  381,  114,  115,
      380,  379,   88,  116,   61,  131,  378,  136,  136,  136,
      136,  136,  218,  218,  218,  218,  219,  219,  219,  219,
      219,  219,  264,  264,  264,  264,  219,  268,  269,  270,
       75,  272,  273,  274,   77,  377,  376,  117,  375,   79,
      278,  279,  280,  374,   81,   82,  373,   84,   85,  372,
      371,  118,  119,  171,  171,  171,  171,  172,  219,  219,

      219,  219,  219,  293,  294,  295,  298,  299,  300,  306,
      307,  308,  370,  173,  310,  311,  312,  174,  219,  219,
      219,  219,  219,  175,  327,  328,  329,  176,  369,  177,
      335,  336,  337,   88,   88,   88,   88,   88,   88,   88,
       88,   89,   89,   89,   89,   89,   89,   89,   89,   92,
       92,   92,   92,   92,   92,   92,   92,   95,   95,   95,
       95,   95,   95,   95,   95,   97,   97,   97,   97,   97,
       97,   97,   97,  104,  104,  104,  104,  104,  104,  104,
      104,  159,  368,  367,  159,  159,  159,  159,  159,  162,
      162,  366,  162,  365,  162,  162,  162,  163,  163,  364,

      163,  163,  163,  163,  163,  166,  166,  363,  166,  166,
      166,  166,  166,  167,  167,  350,  362,  167,  167,  167,
      170,  170,  170,  170,  170,  170,  170,  170,  179,  179,
      361,  179,  179,  360,  179,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  348,  347,  346,  345,  344,  343,
      342,  341,  340,  339,  338,  334,  333,  332,  331,  330,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  309,  305,  304,  303,  302,  301,
      297,  296,  292,  291,  290,  289,  288,  287,  286,  285,
      284,  283,  282,  281,  277,  276,  275,  271,  267,  266,

      265,  256,  263,  259,  258,  255,  251,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  238,  237,  236,  235,
      234,  233,  208,  232,  231,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  217,  216,  200,  213,  212,  211,
      210,  209,  208,  207,  206,  205,  204,  203,  202,  199,
      198,  197,  196,  195,  129,  194,  193,  189,  188,  187,
      186,  183,  129,  178,  156,  155,  154,  153,  152,  151,
      148,  147,  144,  143,  142,  141,  140,  139,  138,  130,
      129,  406,   61,   61,   61,   61,   96,   96,   57,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406
    } ;

static const flex_int16_t yy_chk[743] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   23,   23,   25,   23,
       24,   24,   25,   24,   26,   29,   75,   29,   26,   30,
       23,   30,   29,   75,   24,   37,   30,   45,   45,   38,
       46,   46,   65,   39,   39,   65,   59,   39,   59,   29,
      413,  213,   55,   30,   31,  105,   37,  105,   37,   37,
       38,  213,   38,   38,   78,   37,   37,   39,   39,   38,
       38,   85,   78,  404,   39,   39,   56,  400,  399,   85,
       31,   40,   40,   94,   31,   40,   94,   31,  128,   31,
      128,   31,   55,   55,  398,   31,  108,   31,   31,   55,
       55,   31,   32,  108,  397,   40,   40,   64,   64,   64,

       64,   64,   40,   40,  395,   90,   56,   56,   90,   91,
      142,  394,   91,   56,   56,  393,  392,  100,   32,   90,
      100,  107,   32,   91,  107,   32,  110,   32,  142,   32,
      115,  391,  390,   32,  110,   32,   32,  117,  115,   32,
       33,   33,   33,  163,  388,  117,  163,   63,   33,   63,
       63,   63,   63,   63,   66,  156,   66,   66,   66,   66,
       66,  160,  387,  156,  160,   33,  384,   33,  161,   33,
      180,  161,  180,   33,  164,  160,   33,  164,   33,  383,
       33,  189,  161,  382,   33,  324,   33,   33,  324,  189,
       33,   33,   34,   34,   34,  131,  131,  131,  131,  131,

       34,  132,  381,  132,  132,  132,  132,  132,  133,  133,
      133,  133,  133,  208,  208,  208,  371,   34,  370,   34,
      369,   34,  210,  210,  210,   34,  368,  367,   34,  366,
       34,  365,   34,  216,  216,  216,   34,  364,   34,   34,
      362,  360,   34,   34,   35,  136,  359,  136,  136,  136,
      136,  136,  171,  171,  171,  171,  171,  172,  172,  172,
      172,  172,  218,  218,  218,  218,  218,  224,  224,  224,
       35,  226,  226,  226,   35,  358,  357,   35,  355,   35,
      231,  231,  231,  354,   35,   35,  353,   35,   35,  352,
      350,   35,   35,  101,  101,  101,  101,  101,  219,  219,

      219,  219,  219,  245,  245,  245,  251,  251,  251,  266,
      266,  266,  349,  101,  271,  271,  271,  101,  264,  264,
      264,  264,  264,  101,  297,  297,  297,  101,  348,  101,
      309,  309,  309,  407,  407,  407,  407,  407,  407,  407,
      407,  408,  408,  408,  408,  408,  408,  408,  408,  409,
      409,  409,  409,  409,  409,  409,  409,  410,  410,  410,
      410,  410,  410,  410,  410,  411,  411,  411,  411,  411,
      411,  411,  411,  412,  412,  412,  412,  412,  412,  412,
      412,  414,  347,  346,  414,  414,  414,  414,  414,  415,
      415,  345,  415,  344,  415,  415,  415,  416,  416,  343,

      416,  416,  416,  416,  416,  417,  417,  342,  417,  417,
      417,  417,  417,  418,  418,  341,  340,  418,  418,  418,
      419,  419,  419,  419,  419,  419,  419,  419,  420,  420,
      339,  420,  420,  337,  420,  336,  335,  334,  333,  330,
      329,  328,  327,  326,  323,  322,  321,  320,  319,  318,
      317,  316,  315,  314,  313,  305,  304,  303,  302,  301,
      296,  292,  291,  290,  289,  288,  287,  286,  285,  284,
      283,  277,  276,  275,  267,  259,  258,  257,  256,  255,
      247,  246,  243,  242,  241,  240,  239,  238,  237,  236,
      235,  234,  233,  232,  230,  229,  228,  225,  223,  222,

      221,  220,  217,  215,  214,  212,  209,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  192,  191,  190,  188,  187,  186,  185,  184,
      183,  182,  181,  178,  158,  157,  155,  154,  153,  152,
      151,  150,  149,  148,  147,  146,  145,  144,  143,  141,
      140,  139,  138,  130,  129,  123,  120,  114,  113,  112,
      111,  109,  106,  102,   84,   83,   82,   81,   80,   79,
       77,   76,   74,   73,   72,   71,   70,   69,   68,   62,
       60,   57,   54,   53,   52,   51,   28,   27,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,

      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406,  406,  406,  406,  406,  406,  406,  406,  406,
      406,  406
    } ;

static const flex_int16_t yy_rule_linenum[85] =
    {   0,
       99,  103,  108,  111,  116,  120,  123,  128,  132,  136,
      142,  145,  151,  152,  153,  154,  155,  156,  157,  158,
      159,  160,  161,  162,  163,  164,  165,  166,  167,  168,
      169,  170,  171,  172,  173,  174,  175,  176,  177,  178,
      181,  186,  191,  199,  200,  201,  203,  207,  208,  214,
      221,  226,  233,  241,  246,  247,  248,  249,  250,  251,
      252,  262,  271,  286,  293,  303,  308,  311,  317,  320,
      325,  326,  327,  331,  335,  341,  344,  365,  366,  367,
      368,  385,  386,  387
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
#line 2 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
    #include <cerrno>
    #include <climits>
    #include <cstdlib>
    #include <cstring> // strerror
    #include <string>
    #include <iostream>
    #include "Driver.hpp"
    #include "Scanner.hpp"
	#pragma warning(push, 0)
	#include "Parser.hpp"
    #define MAX_STR_CONST 16382 // TODO: Change this and make it dynamic... functions could be big

    int  bracket_level = 0;
    char  *string_buf_ptr;
    #define CURRENT_SYMBOL yy::parser::symbol_type(yy::parser::token::yytokentype(*YYText()), loc)

    struct IncludeData {
        IncludeData(YY_BUFFER_STATE s, yy::location ln, const char *fname, std::unique_ptr<std::ifstream> fd = nullptr) :
            state(s), location(ln), file_name(fname), fileToClose(std::move(fd)) {}
        YY_BUFFER_STATE state;
        yy::location    location;
        std::string     file_name; // the name of the current file (when in #include, for example)
        std::unique_ptr<std::ifstream>   fileToClose; // keep track of the file descriptor to make sure we will close it
    };
    std::stack<IncludeData> include_stack;

    // we need to do this because yy_pop_state is generated as static
    //static void yy_pop_state();
    #if 0
    void lex_pop_state()
    {
        yy_pop_state();
    }
    #endif
    bool return_from_func = true;
    void print_state(int state);
    void print_current_state();
  const char* state_to_string(int state);

    void Scanner::print_state()
    {
      ::print_state(YY_START);
    }


#line 835 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"
#define YY_NO_INPUT 1
#line 57 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
  // A number symbol corresponding to the value in S.
  yy::parser::symbol_type make_INT(
    const std::string &s,
    const yy::parser::location_type& loc
  );

    yy::parser::symbol_type make_FLOAT(
    const std::string &s,
    const yy::parser::location_type& loc
    );
#line 848 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

#line 79 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
  // Code run each time a pattern is matched.
  # define YY_USER_ACTION  \
  loc.columns (yyleng);\
  //::print_state(YY_START);\
  //CryLog("Current token text: %s", YYText());
#line 856 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"
#line 857 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

#define INITIAL 0
#define ifdef 1
#define endif 2
#define getname 3
#define define 4
#define defname 5
#define defval 6
#define fbo 7
#define fbo1 8
#define clearmode 9
#define rendermode 10
#define incl 11
#define comment 12
#define comment2 13
#define str 14
#define function 15
#define functionbody 16
#define cstbuffer 17
#define technique 18
#define pass 19
#define sampler_state 20
#define dst_state 21
#define pr_state 22
#define color_sample_state 23
#define rasterization_state 24
#define resource 25
#define resource1 26
#define input_layout 27

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin.rdbuf(std::cin.rdbuf());
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout.rdbuf(std::cout.rdbuf());
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 85 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"


#line 88 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
  // A handy shortcut to the location held by the driver.
  yy::location& loc = driver.location;
  // Code run each time yylex is called.
  loc.step();
  int  comment_caller;
  char  string_buf[MAX_STR_CONST];
  //string_buf.clear();
  //CryLog("Begin yylex");



#line 1091 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 407 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 406 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 85 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 85 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 86 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 99 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_FATALERROR(loc);
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 103 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
    yy_push_state(technique);
	return yy::parser::make_TECHNIQUE(loc);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 108 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_REGISTER(loc);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 111 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
  CryLog("[[fn]]");
  yy_push_state(function);
  print_state();
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 116 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
  yy_push_state(cstbuffer);
	return yy::parser::make_CSTBUFFER(loc);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 120 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_TEXTURE2D_TYPE(loc);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 123 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_SAMPLERSTATE(loc);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 128 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_STRUCT(loc);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 132 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_INSPECYFIER(loc);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 136 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	return yy::parser::make_OUTSPECYFIER(loc);
}
	YY_BREAK

case 11:
YY_RULE_SETUP
#line 142 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        return CURRENT_SYMBOL;
    }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 145 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        //yy_pop_state();
        return CURRENT_SYMBOL;
    }
	YY_BREAK


case 13:
YY_RULE_SETUP
#line 151 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_VOID_TYPE(loc);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 152 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_UNSIGNED(loc);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 153 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT_TYPE(loc);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 154 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT2_TYPE(loc);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 155 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT3_TYPE(loc);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 156 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT4_TYPE(loc);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 157 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT2_TYPE(loc);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT3_TYPE(loc);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 159 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FLOAT4_TYPE(loc);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 160 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT2_TYPE(loc);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 161 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT3_TYPE(loc);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 162 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT4_TYPE(loc);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 163 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT2_TYPE(loc);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 164 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT3_TYPE(loc);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 165 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_MAT4_TYPE(loc);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 166 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_BOOL_TYPE(loc);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 167 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_BOOL2_TYPE(loc);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 168 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_BOOL3_TYPE(loc);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 169 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_BOOL4_TYPE(loc);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 170 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT_TYPE(loc);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 171 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT2_TYPE(loc);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 172 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT3_TYPE(loc);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 173 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT4_TYPE(loc);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 174 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT2_TYPE(loc);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 175 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT3_TYPE(loc);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 176 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_INT4_TYPE(loc);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 177 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_UNIFORM(loc);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 178 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_STRING_TYPE(loc);
	YY_BREAK

case 41:
YY_RULE_SETUP
#line 181 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_VERTEXFORMAT(loc);
	YY_BREAK
/*==================================================================
      Comment starting points
    */
case 42:
YY_RULE_SETUP
#line 186 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
    comment_caller  =  INITIAL;
    yy_push_state(comment);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 191 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
    comment_caller  =  YY_START;
    CryLog("Comments!!!");
    yy_push_state(comment2);
    ::print_state(YY_START);
}
	YY_BREAK

case 44:
YY_RULE_SETUP
#line 199 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
/*  eat  anything  that's  not  a  '*'  */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 200 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
/*  eat  up  '*'s  not  followed  by  '/'s  */
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 201 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
loc.lines (yyleng); loc.step ();
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 203 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
yy_pop_state();//BEGIN(comment_caller);
	YY_BREAK


case 48:
YY_RULE_SETUP
#line 207 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
CryLog("_____");
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 208 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
loc.lines (yyleng); loc.step (); yy_pop_state();//BEGIN(comment_caller);
	YY_BREAK

/*==================================================================
      Start of string
    */

case 50:
YY_RULE_SETUP
#line 214 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
string_buf_ptr  =  string_buf;  yy_push_state(str);
	YY_BREAK

/*==================================================================
      rules for inside a string
    */

case 51:
YY_RULE_SETUP
#line 221 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{  /*  saw  closing  quote  -  all  done  */
        yy_pop_state();//BEGIN(INITIAL);
        *string_buf_ptr  =  '\0';
        return yy::parser::make_STR(string_buf, loc);
    }
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 226 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        //FIXME:
        //fprintf(stderr,"\nunterminated  string  constant at line %d\n", line_num);
        //yyterminate();
        gEnv->pLog->LogError("\nunterminated  string  constant at unknown line, FIXME!!!");
		return yy::parser::make_END (loc);
    }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 233 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        /*  octal  escape  sequence  */
        int  result;
        (void)  sscanf(  yytext  +  1,  "%o",  &result  );
        if  (  result  >  0xff  )
            /*  error,  constant  is  out-of-bounds  */
        *string_buf_ptr++  =  result;
    }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 241 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        /*  generate  error  -  bad  escape  sequence;  something
        *  like  '\48'  or  '\0777777'
        */
    }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 246 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  '\n';
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 247 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  '\t';
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 248 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  '\r';
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 249 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  '\b';
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 250 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  '\f';
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 251 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
*string_buf_ptr++  =  yytext[1];
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 252 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        char  *yptr  =  yytext;
        while  (  *yptr  )
        *string_buf_ptr++  =  *yptr++;
    }
	YY_BREAK

/*==================================================================
      rules for inside a GLSL section
    */

case 62:
YY_RULE_SETUP
#line 262 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        bracket_level = 1; // must be one...
        string_buf_ptr  =  string_buf;
        *string_buf_ptr = '\0';
        yy_push_state(functionbody);
        return CURRENT_SYMBOL;
    }
	YY_BREAK

case 63:
YY_RULE_SETUP
#line 271 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        CryLog("bracket level: %d", bracket_level);
        bracket_level--;
        if((bracket_level) == 0)
        {
            *string_buf_ptr  =  '\0';
            // shall I just do BEGIN(INITIAL) ?
            yy_pop_state(); // back to shader
            yy_pop_state();// back to INITIAL
            return_from_func = true;
            return yy::parser::make_CODEBODY(string_buf, loc);
        } else {
            *string_buf_ptr++  =  yytext[0];
        }
    }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 286 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{  /*copy the GLSL data*/
        char  *yptr  =  yytext;
        while  (  *yptr  )
        *string_buf_ptr++  =  *yptr++;
        //TODO:
		loc.lines (yyleng); loc.step ();
    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 293 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{  /*copy the GLSL data*/
        CryLog("Copy function data");
        char  *yptr  =  yytext;
        while  (  *yptr  )
        *string_buf_ptr++  =  *yptr++;
    }
	YY_BREAK
/*==================================================================
      rules for inside a  section
    */

case 66:
YY_RULE_SETUP
#line 303 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        comment_caller  =  INITIAL;
        yy_push_state(pass);
		return yy::parser::make_PASS(loc);
    }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 308 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
		return CURRENT_SYMBOL;
    }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 311 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        //yy_pop_state();//BEGIN(INITIAL);
		return CURRENT_SYMBOL;
    }
	YY_BREAK


case 69:
YY_RULE_SETUP
#line 317 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        return CURRENT_SYMBOL;
    }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 320 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        //yy_pop_state();
        return CURRENT_SYMBOL;
    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 325 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_VERTEXPROGRAM(IShader::Type::E_VERTEX, loc);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 326 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_FRAGMENTPROGRAM(IShader::Type::E_FRAGMENT, loc);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 327 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return yy::parser::make_GEOMETRYPROGRAM(IShader::Type::E_GEOMETRY, loc);
	YY_BREAK


case 74:
YY_RULE_SETUP
#line 331 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        CryLog("{pass,pr_state,input_layout");
		return CURRENT_SYMBOL;
    }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 335 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
        CryLog("}pass,pr_state,input_layout");
		return CURRENT_SYMBOL;
    }
	YY_BREAK

case 76:
/* rule 76 can match eol */
YY_RULE_SETUP
#line 341 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
    loc.lines (yyleng); loc.step ();
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 344 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
    loc.step ();
}
	YY_BREAK
/*
"-"        {
              std::cout << loc.begin.line << " " << loc.end.line << std::endl;
              return yy::parser::make_MINUS  (loc);
           }
"+"        return yy::parser::make_PLUS   (loc);
"*"        return yy::parser::make_STAR   (loc);
"/"        return yy::parser::make_SLASH  (loc);
"("        return yy::parser::make_LPAREN (loc);
")"        return yy::parser::make_RPAREN (loc);
"="        return yy::parser::make_ASSIGN (loc);
";"        return yy::parser::make_SEMICOLON(loc);
"{"        return yy::parser::make_LEFTSCOPE(loc);
"}"        return yy::parser::make_RIGHTSCOPE(loc);
","        return yy::parser::make_COMMA(loc);
    */
case 78:
YY_RULE_SETUP
#line 365 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return make_INT(yytext, loc);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 366 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return make_FLOAT(yytext, loc);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 367 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
return check_type(yytext, loc);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 368 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{   
    if((yytext[0] >= 33) && (yytext[0] <= 126))
        return CURRENT_SYMBOL;
    else {
        CryLog("Warning: line %d : odd character found (%u)...\n", 0xffff, (unsigned char)yytext[0]);
    }
    return CURRENT_SYMBOL;
}
	YY_BREAK
/*==================================================================
      ==================================================================
      !! SIMPLIFIED PREPROCESSOR !!
      More complex preprocessor would require a complete parser that would
      pre-process the code. Here we avoid doing so : directly loading nested 
      includes : Not even using the grammar analyzer !
      ==================================================================
      ==================================================================
    */
case 82:
YY_RULE_SETUP
#line 385 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
BEGIN(incl);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 386 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
/*  eat  the  whitespace and " or < as often in #include */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 387 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{  /*  got  the  include  file  name  */
    char * s = (char*)strchr(YYText(), '\"'); // get rid of the quote or >
    if(!s) s = (char*)strchr(YYText(), '>');
    if(s)
        *s = '\0';
    include_stack.push(IncludeData(YY_CURRENT_BUFFER, driver.location, driver.file.c_str()));
    driver.file = "Data/shaders/fx/" + std::string(YYText());
    driver.location.initialize(&driver.file);
    //line_num  = 1;
    //FILE *fd = NULL;
    std::unique_ptr<std::ifstream> fd;
    const char *buf = NULL;
    #if 0
    if(nvFX::g_includeCb)
        nvFX::g_includeCb(YYText(), fd, buf);
    if(buf)
        yy_switch_to_buffer(yy_scan_string(buf) );
    else if(fd)
        yy_switch_to_buffer(yy_create_buffer(fd, YY_BUF_SIZE));
    else 
    #else
    {
        fd  =  std::make_unique<std::ifstream>(driver.file);
        if(!fd->is_open())
        {
            CryError("err loading file %s", YYText());
        } else {
            CryLog("Including file %s", YYText());
            yy_switch_to_buffer( yy_create_buffer(fd.get(), YY_BUF_SIZE));
        }
    }
    #endif
    if(fd->is_open())
    {
        // let's keep track of this newly opened file : when poping, we will have to close it
        IncludeData &incData = include_stack.top();
        incData.fileToClose = std::move(fd);
        BEGIN(INITIAL);
    } else {
        YY_FATAL_ERROR( "failure in including a file" );
    }
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ifdef):
case YY_STATE_EOF(endif):
case YY_STATE_EOF(getname):
case YY_STATE_EOF(define):
case YY_STATE_EOF(defname):
case YY_STATE_EOF(defval):
case YY_STATE_EOF(fbo):
case YY_STATE_EOF(fbo1):
case YY_STATE_EOF(clearmode):
case YY_STATE_EOF(rendermode):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(comment2):
case YY_STATE_EOF(str):
case YY_STATE_EOF(function):
case YY_STATE_EOF(functionbody):
case YY_STATE_EOF(cstbuffer):
case YY_STATE_EOF(technique):
case YY_STATE_EOF(pass):
case YY_STATE_EOF(sampler_state):
case YY_STATE_EOF(dst_state):
case YY_STATE_EOF(pr_state):
case YY_STATE_EOF(color_sample_state):
case YY_STATE_EOF(rasterization_state):
case YY_STATE_EOF(resource):
case YY_STATE_EOF(resource1):
case YY_STATE_EOF(input_layout):
#line 429 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
{
	if(include_stack.empty())//(  --include_stack_ptr  <  0  )
    {
        return yy::parser::make_END(loc);
        //yyterminate();
    }
    else
    {
        yy_delete_buffer(  YY_CURRENT_BUFFER  );
        IncludeData &incData = include_stack.top();
        yy_switch_to_buffer(incData.state);//[include_stack_ptr]);
        driver.location = incData.location;
        driver.file = incData.file_name;
        if(incData.fileToClose->is_open())
            incData.fileToClose->close();
        include_stack.pop();
    }
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 448 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"
ECHO;
	YY_BREAK
#line 1870 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 407 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 407 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 406);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, char* yy_bp)
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream& input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
/* %endif */
/* %if-c++-only */
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_input_file = file.rdbuf();
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int _new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 448 "/cygdrive/c/Users/chiap/source/repos/fromasmtodisasm/TestEngine/Code/Engine/Renderer/Shaders/Scanner.ll"


yy::parser::symbol_type make_INT(
  const std::string &s,
  const yy::parser::location_type& loc
) {
  errno = 0;
  long n = strtol(s.c_str(), NULL, 10);
  if (! (INT_MIN <= n && n <= INT_MAX && errno != ERANGE))
    throw yy::parser::syntax_error(loc, "integer is out of range: " + s);
  return yy::parser::make_INT((int) n, loc);
}

yy::parser::symbol_type make_FLOAT(
  const std::string &s,
  const yy::parser::location_type& loc
) {
  errno = 0;
  char* stop_str;
  float n = strtof(s.c_str(), &stop_str);
  if (errno == ERANGE)
    throw yy::parser::syntax_error(loc, "float is out of range: " + s);
  return yy::parser::make_FLOAT((float) n, loc);
}

#include <stack>
#include <fstream>
#include <BlackBox/System/ISystem.hpp>

//#include "Parser.hpp"
//#include "Scanner.hpp"

std::stack<std::shared_ptr<std::ifstream>> includes;
bool Scanner::MakeInclude(const char* file_name)
{
	bool result = false;
	CryLog("include <%s>", file_name);
	//include_stack.push(IncludeData(YY_CURRENT_BUFFER, lineno(), driver.file.c_str()));
	auto includeFile = std::make_shared<std::ifstream>(std::ifstream((std::string("res/shaders/fx/") + file_name)));
	const char* buf	 = nullptr;
	{
		//driver.stream = std::ifstream(file_name);
		if (!includeFile->is_open())
		{
			gEnv->pLog->LogError("[FX] File %s not found", file_name);
			LexerError("failure in including a file");
			return result;
		}
		includes.emplace(includeFile);
		gEnv->pLog->Log("$3[FX] File %s opened", file_name);
		yypush_buffer_state(yy_create_buffer(includes.top().get(), YY_BUF_SIZE));
		//yyrestart(includeFile);
		result = true;
	}
	return result;
}

void Scanner::eof()
{
	yypop_buffer_state();
	gEnv->pLog->LogError("$3[FX] File %s ended", driver.file.c_str());
	//yypop_buffer_state();
	//driver.file = incData.file_name;
	//driver.location.initialize(&driver.file);

#if 0
	if(incData.fileToClose)
		fclose(incData.fileToClose);
#endif
	//include_stack.pop();
}

  yy::parser::symbol_type Scanner::check_type(
    const std::string &s,
    const yy::parser::location_type& loc
  )
  {
	  if (auto it = symboltype_map.find(s); it != symboltype_map.end())
	  {
          CryLog("%s: Its type!!!", s.data());
		return yy::parser::make_TYPE_NAME(s, loc); 
	  }
      else {
          //CryLog("%s: Its ident!!!", s.data());
        return yy::parser::make_IDENTIFIER(s, loc);
      }
  }


const char* state_to_string(int state)
{
    static char buffer[256];
    char* cState{};
    switch(state)
    {
        case ifdef: cState = "ifdef"; break; 
        case endif: cState = "endif"; break;
        case getname: cState = "getname"; break;
        case define: cState = "define"; break;
        case defname: cState = "defname"; break;
        case defval: cState = "defval"; break;
        case fbo: cState = "fbo"; break;
        case fbo1: cState = "fbo1"; break;
        case clearmode: cState = "clearmode"; break;
        case rendermode: cState = "rendermode"; break;
        case incl: cState = "incl"; break;
        case comment: cState = "comment"; break;
        case comment2: cState = "comment2"; break;
        case str: cState = "str"; break;
        case function: cState = "function"; break;
        case functionbody: cState = "functionbody"; break;
        case cstbuffer: cState = "cstbuffer"; break;
        case technique: cState = "technique"; break;
        case pass: cState = "pass"; break;
        case sampler_state: cState = "sampler_state"; break;
        case dst_state: cState = "dst_state"; break;
        case pr_state: cState = "pr_state"; break;
        case color_sample_state: cState = "color_sample_state"; break;
        case rasterization_state: cState = "rasterization_state"; break;
        case resource: cState = "resource"; break;
        case resource1: cState = "resource1"; break;
        case input_layout: cState = "input_layout"; break;
        case INITIAL: cState = "INITIAL"; break;
        default: cState = "unknown";
    }

    sprintf(buffer, "%s(%d)", cState, state);
    return buffer;
}

void print_state(int state){
  CryLog("$1Current state: %s", state_to_string(state));
}

#if 0
void print_current_state()
{
  print_state(YY_START);
}
#endif


#pragma warning(pop)

