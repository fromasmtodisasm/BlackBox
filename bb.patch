--- a/Code/Engine/Common/CMakeLists.txt
+++ b/Code/Engine/Common/CMakeLists.txt
@@ -234,19 +234,21 @@ target_include_directories(Interface INTERFACE
     $<INSTALL_INTERFACE:include>
 )

+target_link_libraries(Interface INTERFACE GameLauncher)
+
 install(TARGETS Interface
-       EXPORT blackbox-engineConfig
+       EXPORT blackboxConfig
        INCLUDES DESTINATION include
 )

 export(TARGETS
        Interface
        NAMESPACE BlackBox::
-       FILE "${CMAKE_CURRENT_BINARY_DIR}/blackbox-engineConfig.cmake"
+       FILE "${CMAKE_CURRENT_BINARY_DIR}/blackboxConfig.cmake"
 )
 install(EXPORT
-        blackbox-engineConfig
-    DESTINATION "${CMAKE_INSTALL_DATADIR}/blackbox-engine/cmake"
+        blackboxConfig
+    DESTINATION "${CMAKE_INSTALL_DATADIR}/blackbox/cmake"
     NAMESPACE BlackBox::
 )

diff --git a/Code/Engine/Renderer/CMakeLists.txt b/Code/Engine/Renderer/CMakeLists.txt
index 50a1dab..ef52bb2 100644
--- a/Code/Engine/Renderer/CMakeLists.txt
+++ b/Code/Engine/Renderer/CMakeLists.txt
@@ -92,7 +92,7 @@ endmacro()

 if(OPTION_DX_RENDERER)
        message(STATUS "Using D3D11 Renderer Backend")
-       EngineModule(RenderD3D11 PCH "${CMAKE_CURRENT_SOURCE_DIR}/pch.hpp" SOLUTION_FOLDER "Engine")
+       EngineModule(RenderD3D11 PCH "pch.hpp" SOLUTION_FOLDER "Engine")
        add_common_libs()
        add_common_includes()

@@ -102,17 +102,17 @@ if(OPTION_DX_RENDERER)
 else()
        cryfilecontainer(RenderD3D11 SOLUTION_FOLDER "Engine")
 endif()
-if(OPTION_VK_RENDERER)
-       EngineModule(RendererVK PCH "pch.hpp" SOLUTION_FOLDER
-                                                        "Engine")
-       add_common_libs()
-       add_common_includes()
-
-       find_package(Vulkan REQUIRED)
-       target_link_libraries(${THIS_PROJECT} PRIVATE Vulkan::Vulkan)
-       target_compile_definitions(${THIS_PROJECT} PUBLIC VK_RENDERER)
-       target_include_directories(${THIS_PROJECT} PUBLIC "Vulkan")
-else()
-       cryfilecontainer(RendererVK SOLUTION_FOLDER "Engine")
-endif()
+#if(OPTION_VK_RENDERER)
+#      EngineModule(RendererVK PCH "pch.hpp" SOLUTION_FOLDER
+#                                                       "Engine")
+#      add_common_libs()
+#      add_common_includes()
+#
+#      find_package(Vulkan REQUIRED)
+#      target_link_libraries(${THIS_PROJECT} PRIVATE Vulkan::Vulkan)
+#      target_compile_definitions(${THIS_PROJECT} PUBLIC VK_RENDERER)
+#      target_include_directories(${THIS_PROJECT} PUBLIC "Vulkan")
+#else()
+#      cryfilecontainer(RendererVK SOLUTION_FOLDER "Engine")
+#endif()

diff --git a/Code/Engine/Renderer/Shaders/CMakeLists.txt b/Code/Engine/Renderer/Shaders/CMakeLists.txt
index 7580704..61396e1 100644
--- a/Code/Engine/Renderer/Shaders/CMakeLists.txt
+++ b/Code/Engine/Renderer/Shaders/CMakeLists.txt
@@ -6,9 +6,9 @@ add_sources(
        FxParser
        SOURCE_GROUP
        "Source Files"
-       "Parser.cpp"
+       ${CMAKE_CURRENT_SOURCE_DIR}/Parser.cpp
        "Effect.cpp"
-       "Scanner.cpp"
+       ${CMAKE_CURRENT_BINARY_DIR}/Scanner.cpp
        "Driver.cpp"
        "Parser.yy"
        "Parser.hpp"
@@ -61,12 +61,12 @@ macro(setup_bison_target)
        if(BISON_FOUND)
                bison_target(
                        ShaderParser ${CMAKE_CURRENT_SOURCE_DIR}/Parser.yy
-                       ${CMAKE_CURRENT_SOURCE_DIR}/Parser.cpp
+                       ${CMAKE_CURRENT_BINARY_DIR}/Parser.cpp
                )
        elseif(CYGWIN_INSTALL_PATH)
                cygwin_bison_target(
                        ShaderParser ${CMAKE_CURRENT_SOURCE_DIR}/Parser.yy
-                       ${CMAKE_CURRENT_SOURCE_DIR}/Parser.cpp
+                       ${CMAKE_CURRENT_BINARY_DIR}/Parser.cpp
                )
        endif()
 endmacro()
@@ -74,10 +74,10 @@ endmacro()
 macro(setup_flex_target)
        if(FLEX_FOUND)
                flex_target(ShaderScanner ${CMAKE_CURRENT_SOURCE_DIR}/Scanner.ll
-                                                               ${CMAKE_CURRENT_SOURCE_DIR}/Scanner.cpp)
+                                                               ${CMAKE_CURRENT_BINARY_DIR}/Scanner.cpp)
        elseif(CYGWIN_INSTALL_PATH)
                cygwin_flex_target(ShaderScanner ${CMAKE_CURRENT_SOURCE_DIR}/Scanner.ll
-                                                               ${CMAKE_CURRENT_SOURCE_DIR}/Scanner.cpp)
+                                                               ${CMAKE_CURRENT_BINARY_DIR}/Scanner.cpp)
        endif()
 endmacro()

diff --git a/Tools/CMake/CommonMacros.cmake b/Tools/CMake/CommonMacros.cmake
index 422537b..8c3c5e2 100644
--- a/Tools/CMake/CommonMacros.cmake
+++ b/Tools/CMake/CommonMacros.cmake
@@ -749,7 +749,11 @@ function(Launcher target)
                target_link_libraries(${THIS_PROJECT} PRIVATE m log c android)
                configure_android_launcher(${target})
        elseif(WINDOWS)
-               add_executable(${THIS_PROJECT} WIN32 ${${THIS_PROJECT}_SOURCES})
+               if (OPTION_LAUNCHER_AS_LIB)
+                       add_library(${target} STATIC ${${THIS_PROJECT}_SOURCES})
+               else()
+                       add_executable(${THIS_PROJECT} WIN32 ${${THIS_PROJECT}_SOURCES})
+               endif()
+               endif()
        else()
                add_executable(${target} ${${THIS_PROJECT}_SOURCES})
        endif()
diff --git a/Tools/CMake/PrepareVcpkg.cmake b/Tools/CMake/PrepareVcpkg.cmake
index 4a518df..ba2518c 100644
--- a/Tools/CMake/PrepareVcpkg.cmake
+++ b/Tools/CMake/PrepareVcpkg.cmake
@@ -1,8 +1,9 @@
 function(PrepareVcpkg)
-       #if (NOT DOWNLOAD_VCPKG)
-       #       message(STATUS "Skip vcpkg prepare")
-       #       return()
-       #endif()
+       message(STATUS "WTF")
+       if (NOT DOWNLOAD_VCPKG)
+               message(STATUS "Skip vcpkg prepare")
+               return()
+       endif()
        message(STATUS "Prepare VCPKG")
        #set(VCPKG_ROOT $ENV{VCPKG_ROOT} CACHE STRING "VCPKG_ROOT" FORCE)
        set(VCPKG "")
diff --git a/Tools/CMake/modules/BlackboxEngineConfig.cmake.in b/Tools/CMake/modules/BlackboxEngineConfig.cmake.in
index dead988..0917e04 100644
--- a/Tools/CMake/modules/BlackboxEngineConfig.cmake.in
+++ b/Tools/CMake/modules/BlackboxEngineConfig.cmake.in
@@ -4,4 +4,8 @@ set_property(TARGET BlackBox::Interface PROPERTY INTERFACE_INCLUDE_DIRECTORIES
        "${CMAKE_INSTALL_PREFIX}/Include"
 )

-set(BLACKBOX_DIR ${CMAKE_INSTALL_PREFIX}/share/blackbox-engine)
+set_property(TARGET BlackBox::Interface PROPERTY INTERFACE_COMPILE_DEFINITIONS
+       "ASDFASDF"
+)
+
+
diff --git a/games/CMakeLists.txt b/games/CMakeLists.txt
index d83c7fb..16995eb 100644
--- a/games/CMakeLists.txt
+++ b/games/CMakeLists.txt
@@ -1,3 +1,3 @@
 #add_subdirectory(BlackBox)
 add_subdirectory(Minecraft)
-add_subdirectory(TestRenderer)
\ No newline at end of file
+#add_subdirectory(TestRenderer)
\ No newline at end of file

